{"version":3,"sources":["datasource/load_data.ts","util/gedcom_util.ts","datasource/data_source.ts","changelog.tsx","datasource/embedded.ts","util/error_i18n.ts","topola.jpg","util/media.ts","intro.tsx","menu/menu_item.tsx","menu/search_index.ts","menu/search.tsx","menu/top_bar.tsx","config.tsx","chart.tsx","datasource/wikitree.ts","app.tsx","index.tsx","util/error.ts","util/date_util.ts"],"names":["getSelection","data","selection","id","indis","some","i","generation","prepareData","gedcom","cacheId","images","passphrase","sessionStorage","getItem","decryptedgedcom","initVector","Buffer","alloc","key","crypto","createHash","update","digest","decipher","createDecipheriv","concat","final","toString","decryptData","from","JSON","parse","convertGedcom","Map","serializedData","stringify","setItem","e","console","warn","loadFromUrl","url","handleCors","a","cachedData","window","fetch","response","status","Error","statusText","text","loadGedcom","hash","TopolaError","UploadedDataSource","newSource","oldSource","spec","source","GedcomUrlDataSource","pointerToId","pointer","substring","length","idToIndiMap","map","forEach","indi","set","idToFamMap","fams","fam","prepareGedcom","entries","head","find","entry","tag","other","strcmp","b","sortChildren","comparator","indiMap","indiId1","indiId2","indi1","get","indi2","compareDates","birth","birthDatesComparator","newFams","children","newChildren","sort","Object","assign","sortFamilyChildren","sortSpouses","famMap","famId1","famId2","fam1","fam2","marriage","marriageDatesComparator","newIndis","sortIndiSpouses","normalizeGedcom","IMAGE_EXTENSIONS","filterImage","newImages","image","fileName","match","has","push","title","startsWith","lowerName","toLowerCase","ext","endsWith","isImageFile","filterImages","parseGedcom","json","gedcomEntriesToJson","chartData","DataSourceEnum","LAST_SEEN_VERSION_KEY","getChangelog","maxVersions","seenVersion","seenVersionDate","Date","slice","changes","process","REACT_APP_CHANGELOG","split","notes","date","trim","filter","release","join","unified","use","remarkParse","remarkRehype","rehypeStringify","parsedChanges","String","updateSeenVersion","localStorage","REACT_APP_GIT_TIME","Changelog","useState","open","setOpen","changelog","setChangelog","useEffect","currentVersion","Modal","centered","Header","defaultMessage","Content","className","dangerouslySetInnerHTML","__html","href","Actions","Button","primary","onClick","EmbeddedMessageType","EmbeddedDataSource","message","resolve","reject","PARENT_READY","parent","postMessage","READY","GEDCOM","Promise","addEventListener","onMessage","getI18nMessage","error","intl","formatMessage","code","args","AppMedia","createMedia","breakpoints","small","large","mediaStyles","createMediaStyle","Media","MediaContextProvider","Login","to","prompt","location","GetPassphrase","BackToMain","history","useHistory","goBack","Contents","Intro","Card","as","greaterThanOrEqual","Grid","Row","Column","width","src","logo","alt","at","size","MenuType","require","lunr","normalize","input","toLocaleLowerCase","replace","compare","score","naturalSort","ref","LunrSearchIndex","index","this","self","multiLanguage","field","boost","name","lastName","firstName","spouseLastName","famId","husb","husbId","husband","getHusbandLastName","add","normalizedName","normalizedSpouseLastName","query","s","search","result","getNameLine","SearchBar","props","searchResults","setSearchResults","searchString","setSearchString","searchIndex","useRef","useIntl","getDescriptionLine","birthDate","formatDateOrRange","deathDate","death","debouncedHandleSearch","debounce","results","current","description","displaySearchResult","initialize","buildSearchIndex","Search","onSearchChange","_","value","onResultSelect","onSelection","noResultsMessage","placeholder","selectFirstResult","ScreenSize","TopBar","useLocation","changeView","view","queryString","chartMenus","screenSize","showingChart","chartTypeItems","Dropdown","Item","Icon","allowAllRelativesChart","LARGE","Menu","eventHandlers","onPrint","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","SMALL","Divider","aboutMenu","position","attached","inverted","color","icon","ChartColors","ChartViews","DEFALUT_CONFIG","COLOR_BY_GENERATION","HOURGLASS","COLOR_ARG","NO_COLOR","COLOR_BY_SEX","COLOR_ARG_INVERSE","argsToConfig","undefined","getParam","ConfigPanel","Form","Group","sub","Field","Checkbox","radio","label","tagName","checked","config","onChange","RELATIVES","FANCY","v","k","ChartType","zoomed","event","select","node","scale","transform","offsetX","max","clientWidth","offsetY","clientHeight","attr","scrollLeft","x","scrollTop","y","scrolled","zoomTransform","call","zoom","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","onload","target","inlineImage","baseVal","dataUrl","inlineImages","svg","Array","getElementsByTagName","all","loadImage","Image","URL","createObjectURL","drawImageOnCanvas","canvas","document","createElement","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","getStrippedSvg","getElementById","cloneNode","removeAttribute","setAttribute","Number","getAttribute","querySelector","getSvgContentsWithInlinedImages","XMLSerializer","serializeToString","printChart","printWindow","style","top","left","contentDocument","write","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","contents","Blob","saveAs","drawOnCanvas","downloadPng","downloadPdf","jspdf","default","doc","orientation","unit","format","addImage","save","chartColors","TopolaChartColors","getChartType","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","getRendererType","CircleRenderer","DetailedRenderer","ChartWrapper","chart","animating","rerenderRequired","zoomBehavior","rerenderProps","rerenderResetPosition","factor","scaleBy","initialRender","resetPosition","freezeAnimation","innerHTML","createChart","renderer","svgSelector","indiCallback","info","colors","animate","updateSvgSize","locale","setData","chartInfo","render","startIndi","baseGeneration","zoomOutFactor","min","extent","scaleExtent","translateExtent","on","scrollTopTween","interpolateNumber","t","scrollLeftTween","dx","origin","dy","svgTransition","transition","delay","duration","tween","animationPromise","then","renderChart","Chart","chartWrapper","prevProps","usePrevious","PRIVATE_ID_PREFIX","USER_NAME_COOKIE","getSessionStorageItem","setSessionStorageItem","wikiTreeGet","request","requestData","FormData","append","apiUrl","method","credentials","responseBody","getAncestors","cacheKey","action","fields","ancestors","getRelatives","keys","keysToFetch","getChildren","getSpouses","items","fetchedResults","person","Name","clientLogin","authcode","getLoggedInUserName","Cookies","loadWikiTree","hostname","loginResult","clear","username","everyone","firstPerson","spouseKeys","values","Spouses","personId","ancestorKeys","flat","ancestorDetails","privateFathers","privateMothers","ancestorList","offset","Id","Father","Mother","privateFather","privateMother","privateAncestors","descendantGenerationLimit","toFetch","people","allSpouses","flatMap","Children","c","families","spouses","idToName","fullSizePhotoUrls","getFamilyId","getSet","wife","converted","Set","convertPerson","PhotoData","path","spouse","familySpouses","Gender","child","marriage_date","marriage_location","parsedDate","parseDate","place","buildGedcom","spouse1","spouse2","hideId","FirstName","RealName","LastNameAtBirth","famc","sex","BirthDate","BirthLocation","BirthDateDecade","DataStatus","parseDecade","DeathDate","DeathLocation","DeathDateDecade","Photo","dataStatus","matchedDate","year","month","day","dateRange","qualifier","decade","MONTHS","dateToGedcom","eventToGedcom","dateOrRange","isValidDateOrRange","level","tree","imageToGedcom","fullSizePhotoUrl","pop","gedcomIndis","gedcomFams","escapedId","record","indiToGedcom","famToGedcom","newSet","AppState","WikiTreeDataSource","ErrorMessage","Message","negative","ErrorPopup","Portal","onClose","onDismiss","getArguments","chartTypes","embedded","sourceSpec","WIKITREE","UPLOADED","state","GEDCOM_URL","parsedGen","isNaN","showSidePanel","standalone","messages","cs","messages_cs","de","messages_de","fr","messages_fr","hu","messages_hu","it","messages_it","pl","messages_pl","ru","messages_ru","language","navigator","browser","detect","ReactDOM","component","INITIAL","setState","setSelection","setError","setShowSidePanel","setStandalone","setChartType","showErrorPopup","setShowErrorPopup","setSourceSpec","setFreezeAnimation","setConfig","updateDisplay","newSelection","uploadedDataSource","gedcomUrlDataSource","wikiTreeDataSource","embeddedDataSource","isNewData","newSourceSpec","oldSouce","EMBEDDED","loadData","updateUrl","gen","displayErrorPopup","downloadSvg","onDismissErrorPopup","pathname","LOADING","SHOWING_CHART","ERROR","LOADING_MORE","loadMoreFromWikitree","showWikiTreeMenus","exact","sidePanelTabs","menuItem","configToArgs","Loader","active","Tab","panes","DATE_QUALIFIERS","formatDate","hasDay","hasMonth","hasYear","dateObject","toDateObject","formatOptions","lowerCaseQualifier","formatDateQualifier","Intl","DateTimeFormat","fromDate","toDate","translatedFromDate","translatedToDate","formatDateRage","compareTopolaDates","date1","date2","firstDateOrRange","secondDateOrRange","range"],"mappings":"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","file":"static/js/main.6c58457b.chunk.js","sourcesContent":["import {convertGedcom, TopolaData} from '../util/gedcom_util';\r\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\r\nimport {IndiInfo, JsonGedcomData} from 'topola';\r\nimport { TopolaError } from '../util/error';\r\nimport crypto from 'crypto';\r\n\r\n\r\n/**\r\n * Returns a valid IndiInfo object, either with the given indi and generation\r\n * or with an individual taken from the data and generation 0.\r\n */\r\nexport function getSelection(\r\n  data: JsonGedcomData,\r\n  selection?: IndiInfo,\r\n): IndiInfo {\r\n  // If ID is not given or it doesn't exist in the data, use the first ID in\r\n  // the data.\r\n  const id =\r\n    selection && data.indis.some((i) => i.id === selection.id)\r\n      ? selection.id\r\n      : data.indis[0].id;\r\n  return {id, generation: selection?.generation || 0};\r\n}\r\n\r\nfunction encryptData(\r\n  data: string,\r\n  passphrase: string): Buffer {\r\n  const initVector = Buffer.alloc(16, 0);\r\n  const key = crypto.createHash('sha256').update(passphrase).digest();\r\n  console.log(key);\r\n  const cipher = crypto.createCipheriv(\"aes-256-cbc\", key, initVector);\r\n  return Buffer.concat([\r\n    cipher.update(data),\r\n    cipher.final()\r\n  ]);\r\n}\r\n\r\nfunction decryptData(\r\n  data: Buffer,\r\n  passphrase: string): string {\r\n  const initVector = Buffer.alloc(16, 0);\r\n  const key = crypto.createHash('sha256').update(passphrase).digest();\r\n  const decipher = crypto.createDecipheriv(\"aes-256-cbc\", key, initVector);\r\n  return Buffer.concat([\r\n    decipher.update(data),\r\n    decipher.final()\r\n  ]).toString()\r\n}\r\n\r\nfunction prepareData(\r\n  gedcom: string,\r\n  cacheId: string,\r\n  images?: Map<string, string>,\r\n): TopolaData {\r\n  var passphrase = sessionStorage.getItem('passphrase');\r\n  if (!passphrase) {\r\n    passphrase = '';\r\n  }\r\n\r\n  const deserializedData = Buffer.from(JSON.parse(gedcom.toString()));\r\n  const decryptedgedcom = decryptData(deserializedData, passphrase);\r\n  const data = convertGedcom(decryptedgedcom, images || new Map());\r\n  const serializedData = JSON.stringify(data);\r\n  try {\r\n    sessionStorage.setItem(cacheId, serializedData);\r\n  } catch (e) {\r\n    console.warn('Failed to store data in session storage: ' + e);\r\n  }\r\n  return data;\r\n}\r\n\r\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\r\nexport async function loadFromUrl(\r\n  url: string,\r\n  handleCors: boolean,\r\n): Promise<TopolaData> {\r\n  try {\r\n    const cachedData = sessionStorage.getItem(url);\r\n    if (cachedData) {\r\n      return JSON.parse(cachedData);\r\n    }\r\n  } catch (e) {\r\n    console.warn('Failed to load data from session storage: ' + e);\r\n  }\r\n\r\n  const response = await window.fetch(url);\r\n  if (response.status !== 200) {\r\n    throw new Error(response.statusText);\r\n  }\r\n  const gedcom = await response.text();\r\n  return prepareData(gedcom, url);\r\n}\r\n\r\n/** Loads data from the given GEDCOM file contents. */\r\nexport async function loadGedcom(\r\n  hash: string,\r\n  gedcom?: string,\r\n  images?: Map<string, string>,\r\n): Promise<TopolaData> {\r\n  try {\r\n    const cachedData = sessionStorage.getItem(hash);\r\n    if (cachedData) {\r\n      return JSON.parse(cachedData);\r\n    }\r\n  } catch (e) {\r\n    console.warn('Failed to load data from session storage: ' + e);\r\n  }\r\n  if (!gedcom) {\r\n    throw new TopolaError(\r\n      'ERROR_LOADING_UPLOADED_FILE',\r\n      'Error loading data. Please upload your file again.',\r\n    );\r\n  }\r\n  return prepareData(gedcom, hash, images);\r\n}\r\n\r\nexport interface UploadSourceSpec {\r\n  source: DataSourceEnum.UPLOADED;\r\n  gedcom?: string;\r\n  /** Hash of the GEDCOM contents. */\r\n  hash: string;\r\n  images?: Map<string, string>;\r\n}\r\n\r\n/** Files opened from the local computer. */\r\nexport class UploadedDataSource implements DataSource<UploadSourceSpec> {\r\n  // isNewData(args: Arguments, state: State): boolean {\r\n  isNewData(\r\n    newSource: SourceSelection<UploadSourceSpec>,\r\n    oldSource: SourceSelection<UploadSourceSpec>,\r\n    data?: TopolaData,\r\n  ): boolean {\r\n    return newSource.spec.hash !== oldSource.spec.hash;\r\n  }\r\n\r\n  async loadData(\r\n    source: SourceSelection<UploadSourceSpec>,\r\n  ): Promise<TopolaData> {\r\n    try {\r\n      const data = await loadGedcom(\r\n        source.spec.hash,\r\n        source.spec.gedcom,\r\n        source.spec.images,\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface UrlSourceSpec {\r\n  source: DataSourceEnum.GEDCOM_URL;\r\n  /** URL of the data that is loaded or is being loaded. */\r\n  url: string;\r\n  handleCors: boolean;\r\n}\r\n\r\n/** GEDCOM file loaded by pointing to a URL. */\r\nexport class GedcomUrlDataSource implements DataSource<UrlSourceSpec> {\r\n  isNewData(\r\n    newSource: SourceSelection<UrlSourceSpec>,\r\n    oldSource: SourceSelection<UrlSourceSpec>,\r\n    data?: TopolaData,\r\n  ): boolean {\r\n    return newSource.spec.url !== oldSource.spec.url;\r\n  }\r\n\r\n  async loadData(source: SourceSelection<UrlSourceSpec>): Promise<TopolaData> {\r\n    try {\r\n      const data = await loadFromUrl(source.spec.url, false);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\r\nimport {TopolaError} from './error';\r\nimport {\r\n  gedcomEntriesToJson,\r\n  JsonFam,\r\n  JsonGedcomData,\r\n  JsonImage,\r\n  JsonIndi,\r\n} from 'topola';\r\nimport {compareDates} from './date_util';\r\n\r\nexport interface GedcomData {\r\n  /** The HEAD entry. */\r\n  head: GedcomEntry;\r\n  /** INDI entries mapped by id. */\r\n  indis: {[key: string]: GedcomEntry};\r\n  /** FAM entries mapped by id. */\r\n  fams: {[key: string]: GedcomEntry};\r\n  /** Other entries mapped by id, e.g. NOTE, SOUR. */\r\n  other: {[key: string]: GedcomEntry};\r\n}\r\n\r\nexport interface TopolaData {\r\n  chartData: JsonGedcomData;\r\n  gedcom: GedcomData;\r\n}\r\n\r\n/**\r\n * Returns the identifier extracted from a pointer string.\r\n * E.g. '@I123@' -> 'I123'\r\n */\r\nexport function pointerToId(pointer: string): string {\r\n  return pointer.substring(1, pointer.length - 1);\r\n}\r\n\r\nexport function idToIndiMap(data: JsonGedcomData): Map<string, JsonIndi> {\r\n  const map = new Map<string, JsonIndi>();\r\n  data.indis.forEach((indi) => {\r\n    map.set(indi.id, indi);\r\n  });\r\n  return map;\r\n}\r\n\r\nexport function idToFamMap(data: JsonGedcomData): Map<string, JsonFam> {\r\n  const map = new Map<string, JsonFam>();\r\n  data.fams.forEach((fam) => {\r\n    map.set(fam.id, fam);\r\n  });\r\n  return map;\r\n}\r\n\r\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\r\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\r\n  const indis: {[key: string]: GedcomEntry} = {};\r\n  const fams: {[key: string]: GedcomEntry} = {};\r\n  const other: {[key: string]: GedcomEntry} = {};\r\n  entries.forEach((entry) => {\r\n    if (entry.tag === 'INDI') {\r\n      indis[pointerToId(entry.pointer)] = entry;\r\n    } else if (entry.tag === 'FAM') {\r\n      fams[pointerToId(entry.pointer)] = entry;\r\n    } else if (entry.pointer) {\r\n      other[pointerToId(entry.pointer)] = entry;\r\n    }\r\n  });\r\n  return {head, indis, fams, other};\r\n}\r\n\r\nfunction strcmp(a: string, b: string) {\r\n  if (a < b) {\r\n    return -1;\r\n  }\r\n  if (a > b) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Birth date comparator for individuals. */\r\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\r\n  const indiMap = idToIndiMap(gedcom);\r\n\r\n  return (indiId1: string, indiId2: string) => {\r\n    const indi1: JsonIndi | undefined = indiMap.get(indiId1);\r\n    const indi2: JsonIndi | undefined = indiMap.get(indiId2);\r\n    return (\r\n      compareDates(indi1 && indi1.birth, indi2 && indi2.birth) ||\r\n      strcmp(indiId1, indiId2)\r\n    );\r\n  };\r\n}\r\n\r\n/** Marriage date comparator for families. */\r\nfunction marriageDatesComparator(gedcom: JsonGedcomData) {\r\n  const famMap = idToFamMap(gedcom);\r\n\r\n  return (famId1: string, famId2: string) => {\r\n    const fam1: JsonFam | undefined = famMap.get(famId1);\r\n    const fam2: JsonFam | undefined = famMap.get(famId2);\r\n    return (\r\n      compareDates(fam1 && fam1.marriage, fam2 && fam2.marriage) ||\r\n      strcmp(famId1, famId2)\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Sorts children by birth date in the given family.\r\n * Does not modify the input objects.\r\n */\r\nfunction sortFamilyChildren(\r\n  fam: JsonFam,\r\n  comparator: (id1: string, id2: string) => number,\r\n): JsonFam {\r\n  if (!fam.children) {\r\n    return fam;\r\n  }\r\n  const newChildren = fam.children.sort(comparator);\r\n  return Object.assign({}, fam, {children: newChildren});\r\n}\r\n\r\n/**\r\n * Sorts children by birth date.\r\n * Does not modify the input object.\r\n */\r\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\r\n  const comparator = birthDatesComparator(gedcom);\r\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\r\n  return Object.assign({}, gedcom, {fams: newFams});\r\n}\r\n\r\n/**\r\n * Sorts spouses by marriage date.\r\n * Does not modify the input objects.\r\n */\r\nfunction sortIndiSpouses(\r\n  indi: JsonIndi,\r\n  comparator: (id1: string, id2: string) => number,\r\n): JsonFam {\r\n  if (!indi.fams) {\r\n    return indi;\r\n  }\r\n  const newFams = indi.fams.sort(comparator);\r\n  return Object.assign({}, indi, {fams: newFams});\r\n}\r\n\r\nfunction sortSpouses(gedcom: JsonGedcomData): JsonGedcomData {\r\n  const comparator = marriageDatesComparator(gedcom);\r\n  const newIndis = gedcom.indis.map((indi) =>\r\n    sortIndiSpouses(indi, comparator),\r\n  );\r\n  return Object.assign({}, gedcom, {indis: newIndis});\r\n}\r\n\r\n/**\r\n * If the entry is a reference to a top-level entry, the referenced entry is\r\n * returned. Otherwise, returns the given entry unmodified.\r\n */\r\nexport function dereference(\r\n  entry: GedcomEntry,\r\n  gedcom: GedcomData,\r\n  getterFunction: (gedcom: GedcomData) => {[key: string]: GedcomEntry},\r\n) {\r\n  if (entry.data) {\r\n    const dereferenced = getterFunction(gedcom)[pointerToId(entry.data)];\r\n    if (dereferenced) {\r\n      return dereferenced;\r\n    }\r\n  }\r\n  return entry;\r\n}\r\n\r\n/**\r\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\r\n * continuations with CONT and CONC.\r\n */\r\nexport function getData(entry: GedcomEntry) {\r\n  const result = [entry.data];\r\n  entry.tree.forEach((subentry) => {\r\n    if (subentry.tag === 'CONC' && subentry.data) {\r\n      const last = result.length - 1;\r\n      result[last] += subentry.data;\r\n    } else if (subentry.tag === 'CONT' && subentry.data) {\r\n      result.push(subentry.data);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Sorts children and spouses. */\r\nexport function normalizeGedcom(gedcom: JsonGedcomData): JsonGedcomData {\r\n  return sortSpouses(sortChildren(gedcom));\r\n}\r\n\r\nconst IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif'];\r\n\r\n/** Returns true if the given file name has a known image extension. */\r\nexport function isImageFile(fileName: string): boolean {\r\n  const lowerName = fileName.toLowerCase();\r\n  return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\r\n}\r\n\r\n/**\r\n * Removes images that are not HTTP links or do not have known image extensions.\r\n * Does not modify the input object.\r\n */\r\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\r\n  if (!indi.images || indi.images.length === 0) {\r\n    return indi;\r\n  }\r\n  const newImages: JsonImage[] = [];\r\n  indi.images.forEach((image) => {\r\n    const fileName = image.url.match(/[^/\\\\]*$/)![0];\r\n    // If the image file has been loaded into memory, use it.\r\n    if (images.has(fileName)) {\r\n      newImages.push({url: images.get(fileName)!, title: image.title});\r\n    } else if (image.url.startsWith('http') && isImageFile(image.url)) {\r\n      newImages.push(image);\r\n    }\r\n  });\r\n  return Object.assign({}, indi, {images: newImages});\r\n}\r\n\r\n/**\r\n * Removes images that are not HTTP links.\r\n * Does not modify the input object.\r\n */\r\nfunction filterImages(\r\n  gedcom: JsonGedcomData,\r\n  images: Map<string, string>,\r\n): JsonGedcomData {\r\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\r\n  return Object.assign({}, gedcom, {indis: newIndis});\r\n}\r\n\r\n/**\r\n * Converts GEDCOM file into JSON data performing additional transformations:\r\n * - sort children by birth date\r\n * - remove images that are not HTTP links and aren't mapped in `images`.\r\n *\r\n * @param images Map from file name to image URL. This is used to pass in\r\n *   uploaded images.\r\n */\r\nexport function convertGedcom(\r\n  gedcom: string,\r\n  images: Map<string, string>,\r\n): TopolaData {\r\n  const entries = parseGedcom(gedcom);\r\n  const json = gedcomEntriesToJson(entries);\r\n  if (\r\n    !json ||\r\n    !json.indis ||\r\n    !json.indis.length ||\r\n    !json.fams ||\r\n    !json.fams.length\r\n  ) {\r\n    throw new TopolaError('GEDCOM_READ_FAILED', 'Failed to read GEDCOM file');\r\n  }\r\n\r\n  return {\r\n    chartData: filterImages(normalizeGedcom(json), images),\r\n    gedcom: prepareGedcom(entries),\r\n  };\r\n}\r\n\r\nexport function getSoftware(head: GedcomEntry): string | null {\r\n  const sour =\r\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\r\n  const name =\r\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\r\n  return (name && name.data) || null;\r\n}\r\n\r\nexport function getName(person: GedcomEntry): string | undefined {\r\n  const names = person.tree.filter((subEntry) => subEntry.tag === 'NAME');\r\n  const notMarriedName = names.find(\r\n    (subEntry) =>\r\n      subEntry.tree.filter(\r\n        (nameEntry) => nameEntry.tag === 'TYPE' && nameEntry.data === 'married',\r\n      ).length === 0,\r\n  );\r\n  const name = notMarriedName || names[0];\r\n  return name?.data.replace(/\\//g, '');\r\n}\r\n\r\nexport function getFileName(fileEntry: GedcomEntry): string | undefined {\r\n  const fileTitle = fileEntry?.tree.find((entry) => entry.tag === 'TITL')?.data;\r\n\r\n  const fileExtension = fileEntry?.tree.find((entry) => entry.tag === 'FORM')\r\n    ?.data;\r\n\r\n  return fileTitle && fileExtension && fileTitle + '.' + fileExtension;\r\n}\r\n","import {IndiInfo} from 'topola';\r\nimport {TopolaData} from '../util/gedcom_util';\r\n\r\n/** Supported data sources. */\r\nexport enum DataSourceEnum {\r\n  UPLOADED,\r\n  GEDCOM_URL,\r\n  WIKITREE,\r\n  EMBEDDED,\r\n}\r\n\r\n/** Source specification together with individual selection. */\r\nexport interface SourceSelection<SourceSpecT> {\r\n  spec: SourceSpecT;\r\n  selection?: IndiInfo;\r\n}\r\n\r\n/** Interface encapsulating functions specific for a data source. */\r\nexport interface DataSource<SourceSpecT> {\r\n  /**\r\n   * Returns true if the application is now loading a completely new data set\r\n   * and the existing one should be wiped.\r\n   */\r\n  isNewData(\r\n    newSource: SourceSelection<SourceSpecT>,\r\n    oldSource: SourceSelection<SourceSpecT>,\r\n    data?: TopolaData,\r\n  ): boolean;\r\n  /** Loads data from the data source. */\r\n  loadData(spec: SourceSelection<SourceSpecT>): Promise<TopolaData>;\r\n}\r\n","import rehypeStringify from 'rehype-stringify';\r\nimport remarkParse from 'remark-parse';\r\nimport remarkRehype from 'remark-rehype';\r\nimport {Button, Header, Modal} from 'semantic-ui-react';\r\nimport {unified} from 'unified';\r\nimport {useEffect, useState} from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nconst LAST_SEEN_VERSION_KEY = 'last_seen_version';\r\n\r\n/**\r\n * Returns changelog as raw HTML.\r\n *\r\n * @param maxVersions Max number of versions to include in changelog\r\n * @param seenVersion Last seen app version\r\n */\r\nexport async function getChangelog(maxVersions: number, seenVersion?: string) {\r\n  const seenVersionDate = seenVersion\r\n    ? Date.parse(seenVersion.slice(0, 10))\r\n    : 0;\r\n\r\n  const changes =\r\n    process.env.REACT_APP_CHANGELOG?.split('##')\r\n      .slice(1, maxVersions + 1)\r\n      .map((notes) => {\r\n        const date = Date.parse(notes.split('\\n')[0].trim());\r\n        return {date, notes: '####' + notes};\r\n      })\r\n      .filter((release) => release.date > seenVersionDate)\r\n      .map((release) => release.notes)\r\n      .join('\\n') || '';\r\n\r\n  const parsedChanges = await unified()\r\n    .use(remarkParse)\r\n    .use(remarkRehype)\r\n    .use(rehypeStringify)\r\n    .process(changes);\r\n  return String(parsedChanges);\r\n}\r\n\r\n/** Stores in local storage the current app version as the last seen version. */\r\nexport function updateSeenVersion() {\r\n  localStorage.setItem(LAST_SEEN_VERSION_KEY, process.env.REACT_APP_GIT_TIME!);\r\n}\r\n\r\n/**\r\n * Shows changelog entries if the user has seen an older version of\r\n * Topola Viewer and is now seeing a newer one.\r\n */\r\nexport function Changelog() {\r\n  const [open, setOpen] = useState(false);\r\n  const [changelog, setChangelog] = useState('');\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const seenVersion = localStorage.getItem(LAST_SEEN_VERSION_KEY);\r\n      const currentVersion = process.env.REACT_APP_GIT_TIME!;\r\n      if (!seenVersion || seenVersion === currentVersion) {\r\n        return;\r\n      }\r\n\r\n      const changes = await getChangelog(3, seenVersion);\r\n      setChangelog(changes);\r\n      setOpen(!!changes);\r\n      updateSeenVersion();\r\n    })();\r\n  });\r\n\r\n  return (\r\n    <Modal open={open} centered={false}>\r\n      <Header>\r\n        <FormattedMessage\r\n          id=\"whats_new.title\"\r\n          defaultMessage=\"What's new in this version?\"\r\n        />\r\n      </Header>\r\n      <Modal.Content className=\"limit-height\">\r\n        <span dangerouslySetInnerHTML={{__html: changelog}} />\r\n        <a href=\"https://github.com/PeWu/topola-viewer/blob/master/CHANGELOG.md\">\r\n          <FormattedMessage\r\n            id=\"intro.full_changelog\"\r\n            defaultMessage=\"See full changelog\"\r\n          />\r\n        </a>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button primary onClick={() => setOpen(false)}>\r\n          Close\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n","import {DataSource, DataSourceEnum, SourceSelection} from './data_source';\r\nimport {getSoftware, TopolaData} from '../util/gedcom_util';\r\nimport {loadGedcom} from './load_data';\r\n\r\n/**\r\n * Message types used in embedded mode.\r\n * When the parent is ready to receive messages, it sends PARENT_READY.\r\n * When the child (this app) is ready to receive messages, it sends READY.\r\n * When the child receives PARENT_READY, it sends READY.\r\n * When the parent receives READY, it sends data in a GEDCOM message.\r\n */\r\nenum EmbeddedMessageType {\r\n  GEDCOM = 'gedcom',\r\n  READY = 'ready',\r\n  PARENT_READY = 'parent_ready',\r\n}\r\n\r\n/** Message sent to parent or received from parent in embedded mode. */\r\ninterface EmbeddedMessage {\r\n  message: EmbeddedMessageType;\r\n}\r\n\r\ninterface GedcomMessage extends EmbeddedMessage {\r\n  message: EmbeddedMessageType.GEDCOM;\r\n  gedcom?: string;\r\n}\r\n\r\nexport interface EmbeddedSourceSpec {\r\n  source: DataSourceEnum.EMBEDDED;\r\n}\r\n\r\n/** GEDCOM file received from outside of the iframe. */\r\nexport class EmbeddedDataSource implements DataSource<EmbeddedSourceSpec> {\r\n  isNewData(\r\n    newSource: SourceSelection<EmbeddedSourceSpec>,\r\n    oldSource: SourceSelection<EmbeddedSourceSpec>,\r\n    data?: TopolaData,\r\n  ): boolean {\r\n    // Never reload data.\r\n    return false;\r\n  }\r\n\r\n  private async onMessage(\r\n    message: EmbeddedMessage,\r\n    resolve: (value: TopolaData) => void,\r\n    reject: (reason: any) => void,\r\n  ) {\r\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\r\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\r\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\r\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\r\n      const gedcom = (message as GedcomMessage).gedcom;\r\n      if (!gedcom) {\r\n        return;\r\n      }\r\n      try {\r\n        const data = await loadGedcom('', gedcom);\r\n        resolve(data);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async loadData(\r\n    source: SourceSelection<EmbeddedSourceSpec>,\r\n  ): Promise<TopolaData> {\r\n    // Notify the parent window that we are ready.\r\n    return new Promise<TopolaData>((resolve, reject) => {\r\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\r\n      window.addEventListener('message', (data) =>\r\n        this.onMessage(data.data, resolve, reject),\r\n      );\r\n    });\r\n  }\r\n}\r\n","import {IntlShape} from 'react-intl';\r\nimport {TopolaError} from './error';\r\n\r\n/**\r\n * Returns a translated message for the given error. If the message can't be\r\n * translated, the original error.message is returned.\r\n */\r\nexport function getI18nMessage(error: Error, intl: IntlShape): string {\r\n  if (!(error instanceof TopolaError)) {\r\n    return error.message;\r\n  }\r\n  return intl.formatMessage(\r\n    {\r\n      id: `error.${error.code}`,\r\n      defaultMessage: error.message,\r\n    },\r\n    error.args,\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/topola.a3ffa9a5.jpg\";","import {createMedia} from '@artsy/fresnel';\r\n\r\n/** Defines the breakpoints at which to show different UI variants.*/\r\nconst AppMedia = createMedia({\r\n  breakpoints: {\r\n    small: 320,\r\n    large: 768,\r\n  },\r\n});\r\nexport const mediaStyles = AppMedia.createMediaStyle();\r\nexport const {Media, MediaContextProvider} = AppMedia;\r\n","import * as queryString from 'query-string';\r\nimport {useEffect, useState} from 'react';\r\nimport logo from './topola.jpg';\r\nimport {Card, Grid, Image} from 'semantic-ui-react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport {Media} from './util/media';\r\nimport { getChangelog, updateSeenVersion } from './changelog';\r\n \r\n///** Link that loads a GEDCOM file from URL. */\r\n//function GedcomLink(props: {url: string; text: string}) {\r\n//  return (\r\n//    <Link\r\n//      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\r\n//    >\r\n//      {props.text}\r\n//    </Link>\r\n//  );\r\n//}\r\n\r\n//function formatBuildDate(dateString: string) {\r\n//  return dateString?.slice(0, 16) || '';\r\n//}\r\n\r\nfunction Login() {\r\n  function GetPassphrase()\r\n  {\r\n    const passphrase = prompt(\"Jelszó a családfához:\");\r\n    if (passphrase)\r\n    {\r\n      sessionStorage.setItem(\"passphrase\", passphrase);\r\n      window.location.assign(\"https://patayg.github.io/luca/index.html#/view\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  try\r\n  {\r\n    const hashData = sessionStorage.getItem(\"passphrase\");\r\n    if (!hashData)\r\n    {\r\n      return (\r\n        <>\r\n          <div><b>\r\n            <Link to=\"#\" onClick={() => GetPassphrase()}>\r\n              👉👉 A továbblépéshez kérlek, kattints ide és add meg a jelszót!👈👈\r\n            </Link>\r\n         </b></div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  catch (e)\r\n  {\r\n      console.warn('Failed to load data from session storage: ' + e);\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction BackToMain() {\r\n  const history = useHistory();\r\n  try\r\n  {\r\n    const hashData = sessionStorage.getItem(\"passphrase\");\r\n    if (hashData)\r\n    {\r\n      return (\r\n        <>\r\n          <div><b>\r\n            <Link to=\"#\" onClick={() => history.goBack()}>\r\n              Vissza a főoldalra\r\n            </Link>\r\n          </b></div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  catch (e)\r\n  {\r\n    console.warn('Failed to load data from session storage: ' + e);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction Contents() {\r\n  const [changelog, setChangelog] = useState('');\r\n  useEffect(() => {\r\n    (async () => {\r\n      setChangelog(await getChangelog(1));\r\n      updateSeenVersion();\r\n    })();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Ez a Luca család rokonsági hálózata. (családfának egy kicsit talán túl ágas-bogas)\r\n      </p>\r\n      <p>\r\n      {Login()}\r\n      </p>\r\n      <p>\r\n      Nagyon örülök minden kiegészítésnek, javításnak. A módosításokat így juttathatjátok el hozzám:\r\n      <ul>\r\n        <li>email: gergely.patay kukac gmail.com\r\n        </li>\r\n        <li>Facebook: Patay Gergely <a href=\"https://www.facebook.com/gergely.patay\">https://www.facebook.com/gergely.patay</a>\r\n        </li>\r\n        </ul>\r\n      </p>\r\n\r\n      <p>\r\n        A megjelenítő a <a href=\"https://github.com/PeWu/topola-viewer\">Topola Geneology Viewer</a> módosított verzióját használja.\r\n      </p>\r\n\r\n      <p>\r\n        {BackToMain()}\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n/** The intro page. */\r\nexport function Intro() {\r\n  return (\r\n    <div id=\"content\">\r\n      <div className=\"backgroundImage\" />\r\n      <Card className=\"intro\">\r\n        <Card.Content as={Media} greaterThanOrEqual=\"large\">\r\n          <Card.Header>\r\n            <FormattedMessage\r\n              id=\"intro.title\"\r\n              defaultMessage=\"Luca Family Tree\"\r\n            />\r\n          </Card.Header>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Grid as={Media} greaterThanOrEqual=\"large\">\r\n            <Grid.Row>\r\n              <Grid.Column width={5}>\r\n                <Image src={logo} alt=\"Topola logo\" />\r\n              </Grid.Column>\r\n              <Grid.Column width={11}>\r\n                <Contents />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n          <Media at=\"small\">\r\n            <Image\r\n              src={logo}\r\n              alt=\"Topola logo\"\r\n              centered={true}\r\n              size=\"tiny\"\r\n              className=\"blockImage\"\r\n            />\r\n            <Contents />\r\n          </Media>\r\n        </Card.Content>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Menu,\r\n  Dropdown,\r\n  MenuItemProps,\r\n  DropdownItemProps,\r\n} from 'semantic-ui-react';\r\n\r\nexport enum MenuType {\r\n  Menu,\r\n  Dropdown,\r\n}\r\n\r\ninterface Props {\r\n  menuType?: MenuType;\r\n}\r\n\r\nexport function MenuItem(props: Props & MenuItemProps & DropdownItemProps) {\r\n  const newProps = {...props};\r\n  // Remove menuType from props to avoid error message in the console.\r\n  delete newProps.menuType;\r\n  return (\r\n    <>\r\n      {props.menuType === MenuType.Menu ? (\r\n        <Menu.Item {...newProps}>{props.children}</Menu.Item>\r\n      ) : (\r\n        <Dropdown.Item {...newProps}>{props.children}</Dropdown.Item>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import lunr from 'lunr';\r\nimport naturalSort from 'javascript-natural-sort';\r\nimport {idToFamMap, idToIndiMap} from '../util/gedcom_util';\r\nimport {JsonFam, JsonGedcomData, JsonIndi} from 'topola';\r\n\r\n// TODO: Add type declarations and use import instead of require.\r\nrequire('lunr-languages/lunr.stemmer.support')(lunr);\r\nrequire('lunr-languages/lunr.multi')(lunr);\r\nrequire('lunr-languages/lunr.de')(lunr);\r\nrequire('lunr-languages/lunr.fr')(lunr);\r\nrequire('lunr-languages/lunr.hu')(lunr);\r\nrequire('lunr-languages/lunr.it')(lunr);\r\nrequire('lunr-languages/lunr.ru')(lunr);\r\n\r\nconst MAX_RESULTS = 8;\r\n\r\nexport interface SearchResult {\r\n  id: string;\r\n  indi: JsonIndi;\r\n}\r\n\r\nexport interface SearchIndex {\r\n  search(input: string): SearchResult[];\r\n}\r\n\r\n/** Removes accents from letters, e.g. ó->o, ę->e. */\r\nfunction normalize(input: string) {\r\n  return input\r\n    .toLocaleLowerCase()\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '')\r\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\r\n}\r\n\r\n/** Comparator to sort by score first, then by id. */\r\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\r\n  if (a.score !== b.score) {\r\n    return b.score - a.score;\r\n  }\r\n  return naturalSort(a.ref, b.ref);\r\n}\r\n\r\n/** Returns all last names of all husbands as a space-separated string. */\r\nfunction getHusbandLastName(\r\n  indi: JsonIndi,\r\n  indiMap: Map<String, JsonIndi>,\r\n  famMap: Map<string, JsonFam>,\r\n): string {\r\n  return (indi.fams || [])\r\n    .map((famId) => famMap.get(famId))\r\n    .map((fam) => fam && fam.husb)\r\n    .map((husbId) => husbId && indiMap.get(husbId))\r\n    .map((husband) => husband && husband.lastName)\r\n    .join(' ');\r\n}\r\n\r\nclass LunrSearchIndex implements SearchIndex {\r\n  private index: lunr.Index | undefined;\r\n  private indiMap: Map<string, JsonIndi>;\r\n  private famMap: Map<string, JsonFam>;\r\n\r\n  constructor(data: JsonGedcomData) {\r\n    this.indiMap = idToIndiMap(data);\r\n    this.famMap = idToFamMap(data);\r\n  }\r\n\r\n  initialize() {\r\n    const self = this;\r\n    this.index = lunr(function () {\r\n      this.use((lunr as any).multiLanguage('de', 'en', 'fr', 'hu', 'it', 'ru'));\r\n      this.ref('id');\r\n      this.field('id');\r\n      this.field('name', {boost: 10});\r\n      this.field('normalizedName', {boost: 8});\r\n      this.field('spouseLastName', {boost: 2});\r\n      this.field('normalizedSpouseLastName', {boost: 2});\r\n\r\n      self.indiMap.forEach((indi) => {\r\n        const name = [indi.lastName, indi.firstName].join(' ');\r\n        const spouseLastName = getHusbandLastName(\r\n          indi,\r\n          self.indiMap,\r\n          self.famMap,\r\n        );\r\n        this.add({\r\n          id: indi.id,\r\n          name,\r\n          normalizedName: normalize(name),\r\n          spouseLastName,\r\n          normalizedSpouseLastName: normalize(spouseLastName),\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public search(input: string): SearchResult[] {\r\n    const query = input\r\n      .split(' ')\r\n      .filter((s) => !!s)\r\n      .map((s) => `${s} ${s}*`)\r\n      .join(' ');\r\n    const results = this.index!.search(query);\r\n    return results\r\n      .sort(compare)\r\n      .slice(0, MAX_RESULTS)\r\n      .map((result) => ({id: result.ref, indi: this.indiMap.get(result.ref)!}));\r\n  }\r\n}\r\n\r\n/** Builds a search index from data. */\r\nexport function buildSearchIndex(data: JsonGedcomData): SearchIndex {\r\n  const index = new LunrSearchIndex(data);\r\n  index.initialize();\r\n  return index;\r\n}\r\n","import debounce from 'debounce';\r\nimport {buildSearchIndex, SearchIndex, SearchResult} from './search_index';\r\nimport {formatDateOrRange} from '../util/date_util';\r\nimport {IndiInfo, JsonGedcomData} from 'topola';\r\nimport {JsonIndi} from 'topola';\r\nimport {Search, SearchResultProps} from 'semantic-ui-react';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport {useIntl} from 'react-intl';\r\n\r\nfunction getNameLine(result: SearchResult) {\r\n  const name = [result.indi.lastName, result.indi.firstName].join(' ').trim();\r\n  if (result.id.length > 8) {\r\n    return name;\r\n  }\r\n  return (\r\n    <>\r\n      {name} <i>({result.id})</i>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface Props {\r\n  /** Data used for the search index. */\r\n  data: JsonGedcomData;\r\n  onSelection: (indiInfo: IndiInfo) => void;\r\n}\r\n\r\n/** Displays and handles the search box in the top bar. */\r\nexport function SearchBar(props: Props) {\r\n  const [searchResults, setSearchResults] = useState<SearchResultProps[]>([]);\r\n  const [searchString, setSearchString] = useState('');\r\n  const searchIndex = useRef<SearchIndex>();\r\n  const intl = useIntl();\r\n\r\n  function getDescriptionLine(indi: JsonIndi) {\r\n    const birthDate = formatDateOrRange(indi.birth, intl);\r\n    const deathDate = formatDateOrRange(indi.death, intl);\r\n    if (!deathDate) {\r\n      return birthDate;\r\n    }\r\n    return `${birthDate} – ${deathDate}`;\r\n  }\r\n\r\n  /** Produces an object that is displayed in the Semantic UI Search results. */\r\n  function displaySearchResult(result: SearchResult): SearchResultProps {\r\n    return {\r\n      id: result.id,\r\n      key: result.id,\r\n      title: getNameLine(result),\r\n      description: getDescriptionLine(result.indi),\r\n    } as SearchResultProps;\r\n  }\r\n\r\n  /** On search input change. */\r\n  function handleSearch(input: string | undefined) {\r\n    if (!input) {\r\n      return;\r\n    }\r\n    const results = searchIndex\r\n      .current!.search(input)\r\n      .map((result) => displaySearchResult(result));\r\n    setSearchResults(results);\r\n  }\r\n  const debouncedHandleSearch = useRef(debounce(handleSearch, 200));\r\n\r\n  /** On search result selected. */\r\n  function handleResultSelect(id: string) {\r\n    props.onSelection({id, generation: 0});\r\n    setSearchString('');\r\n  }\r\n\r\n  /** On search string changed. */\r\n  function onChange(value: string) {\r\n    debouncedHandleSearch.current(value);\r\n    setSearchString(value);\r\n  }\r\n\r\n  // Initialize the search index.\r\n  useEffect(() => {\r\n    searchIndex.current = buildSearchIndex(props.data);\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <Search\r\n      onSearchChange={(_, data) => onChange(data.value!)}\r\n      onResultSelect={(_, data) => handleResultSelect(data.result.id)}\r\n      results={searchResults}\r\n      noResultsMessage={intl.formatMessage({\r\n        id: 'menu.search.no_results',\r\n        defaultMessage: 'No results found',\r\n      })}\r\n      placeholder={intl.formatMessage({\r\n        id: 'menu.search.placeholder',\r\n        defaultMessage: 'Search for people',\r\n      })}\r\n      selectFirstResult={true}\r\n      value={searchString}\r\n      id=\"search\"\r\n    />\r\n  );\r\n}\r\n","import * as queryString from 'query-string';\r\nimport {Dropdown, Icon, Menu} from 'semantic-ui-react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {IndiInfo, JsonGedcomData} from 'topola';\r\nimport {Link} from 'react-router-dom';\r\nimport {Media} from '../util/media';\r\nimport {MenuType} from './menu_item';\r\nimport {SearchBar} from './search';\r\nimport {UploadMenu} from './upload_menu';\r\nimport {UrlMenu} from './url_menu';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nenum ScreenSize {\r\n  LARGE,\r\n  SMALL,\r\n}\r\n\r\ninterface EventHandlers {\r\n  onSelection: (indiInfo: IndiInfo) => void;\r\n  onPrint: () => void;\r\n  onDownloadPdf: () => void;\r\n  onDownloadPng: () => void;\r\n  onDownloadSvg: () => void;\r\n}\r\n\r\ninterface Props {\r\n  /** True if the application is currently showing a chart. */\r\n  showingChart: boolean;\r\n  /** Data used for the search index. */\r\n  data?: JsonGedcomData;\r\n  standalone: boolean;\r\n  /** Whether to show the \"All relatives\" chart type in the menu. */\r\n  allowAllRelativesChart: boolean;\r\n  eventHandlers: EventHandlers;\r\n  /** Whether to show additional WikiTree menus. */\r\n  showWikiTreeMenus: boolean;\r\n}\r\n\r\nexport function TopBar(props: Props) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  function changeView(view: string) {\r\n    const search = queryString.parse(location.search);\r\n    if (search.view !== view) {\r\n      search.view = view;\r\n      location.search = queryString.stringify(search);\r\n      history.push(location);\r\n    }\r\n  }\r\n\r\n  function chartMenus(screenSize: ScreenSize) {\r\n    if (!props.showingChart) {\r\n      return null;\r\n    }\r\n    const chartTypeItems = (\r\n      <>\r\n        <Dropdown.Item onClick={() => changeView('hourglass')}>\r\n          <Icon name=\"hourglass\" />\r\n          <FormattedMessage\r\n            id=\"menu.hourglass\"\r\n            defaultMessage=\"Hourglass chart\"\r\n          />\r\n        </Dropdown.Item>\r\n        {props.allowAllRelativesChart ? (\r\n          <Dropdown.Item onClick={() => changeView('relatives')}>\r\n            <Icon name=\"users\" />\r\n            <FormattedMessage\r\n              id=\"menu.relatives\"\r\n              defaultMessage=\"All relatives\"\r\n            />\r\n          </Dropdown.Item>\r\n        ) : null}\r\n        <Dropdown.Item onClick={() => changeView('fancy')}>\r\n          <Icon name=\"users\" />\r\n          <FormattedMessage\r\n            id=\"menu.fancy\"\r\n            defaultMessage=\"Fancy tree (experimental)\"\r\n          />\r\n        </Dropdown.Item>\r\n      </>\r\n    );\r\n    switch (screenSize) {\r\n      case ScreenSize.LARGE:\r\n        return (\r\n          <>\r\n            <Menu.Item onClick={props.eventHandlers.onPrint}>\r\n              <Icon name=\"print\" />\r\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\r\n            </Menu.Item>\r\n\r\n            <Dropdown\r\n              trigger={\r\n                <div>\r\n                  <Icon name=\"download\" />\r\n                  <FormattedMessage\r\n                    id=\"menu.download\"\r\n                    defaultMessage=\"Download\"\r\n                  />\r\n                </div>\r\n              }\r\n              className=\"item\"\r\n            >\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={props.eventHandlers.onDownloadPdf}>\r\n                  <FormattedMessage\r\n                    id=\"menu.pdf_file\"\r\n                    defaultMessage=\"PDF file\"\r\n                  />\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={props.eventHandlers.onDownloadPng}>\r\n                  <FormattedMessage\r\n                    id=\"menu.png_file\"\r\n                    defaultMessage=\"PNG file\"\r\n                  />\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={props.eventHandlers.onDownloadSvg}>\r\n                  <FormattedMessage\r\n                    id=\"menu.svg_file\"\r\n                    defaultMessage=\"SVG file\"\r\n                  />\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <Dropdown\r\n              trigger={\r\n                <div>\r\n                  <Icon name=\"eye\" />\r\n                  <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\r\n                </div>\r\n              }\r\n              className=\"item\"\r\n            >\r\n              <Dropdown.Menu>{chartTypeItems}</Dropdown.Menu>\r\n            </Dropdown>\r\n            <SearchBar\r\n              data={props.data!}\r\n              onSelection={props.eventHandlers.onSelection}\r\n              {...props}\r\n            />\r\n          </>\r\n        );\r\n\r\n      case ScreenSize.SMALL:\r\n        return (\r\n          <>\r\n            <Dropdown.Item onClick={props.eventHandlers.onPrint}>\r\n              <Icon name=\"print\" />\r\n              <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\r\n            </Dropdown.Item>\r\n\r\n            <Dropdown.Divider />\r\n\r\n            <Dropdown.Item onClick={props.eventHandlers.onDownloadPdf}>\r\n              <Icon name=\"download\" />\r\n              <FormattedMessage\r\n                id=\"menu.download_pdf\"\r\n                defaultMessage=\"Downlod PDF\"\r\n              />\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={props.eventHandlers.onDownloadPng}>\r\n              <Icon name=\"download\" />\r\n              <FormattedMessage\r\n                id=\"menu.download_png\"\r\n                defaultMessage=\"Download PNG\"\r\n              />\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={props.eventHandlers.onDownloadSvg}>\r\n              <Icon name=\"download\" />\r\n              <FormattedMessage\r\n                id=\"menu.download_svg\"\r\n                defaultMessage=\"Download SVG\"\r\n              />\r\n            </Dropdown.Item>\r\n\r\n            <Dropdown.Divider />\r\n            {chartTypeItems}\r\n            <Dropdown.Divider />\r\n          </>\r\n        );\r\n    }\r\n  }\r\n\r\n  function titleMenu() {\r\n    return (\r\n      <span id=\"titleMenu\" style={{ visibility: 'hidden' }}>\r\n       <Link to=\"/view\">\r\n          <Menu.Item>\r\n            Luca csal&aacute;dfa\r\n          </Menu.Item>\r\n      </Link>\r\n     </span>\r\n    );\r\n  }\r\n\r\n  function aboutMenu() {\r\n    return (\r\n      <Menu.Menu position=\"right\">\r\n        <Link to=\"/\">\r\n          <Menu.Item name=\"aboutMenu\">\r\n            Tudnival&oacute;k\r\n          </Menu.Item>\r\n        </Link>\r\n      </Menu.Menu>\r\n      );\r\n  }\r\n\r\n  function fileMenus(screenSize: ScreenSize) {\r\n\r\n    // Don't show \"open\" menus in non-standalone mode.\r\n    if (!props.standalone) {\r\n      return null;\r\n    }\r\n\r\n    switch (screenSize) {\r\n      case ScreenSize.LARGE:\r\n        // Show dropdown if chart is shown, otherwise show individual menu\r\n        // items.\r\n        const menus = props.showingChart ? (\r\n          <Dropdown\r\n            trigger={\r\n              <div>\r\n                <Icon name=\"folder open\" />\r\n                <FormattedMessage id=\"menu.open\" defaultMessage=\"Open\" />\r\n              </div>\r\n            }\r\n            className=\"item\"\r\n          >\r\n            <Dropdown.Menu>\r\n              <UploadMenu menuType={MenuType.Dropdown} {...props} />\r\n              <UrlMenu menuType={MenuType.Dropdown} {...props} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        ) : (\r\n          <>\r\n            <UploadMenu menuType={MenuType.Menu} {...props} />\r\n            <UrlMenu menuType={MenuType.Menu} {...props} />\r\n          </>\r\n        );\r\n        return menus;\r\n\r\n      case ScreenSize.SMALL:\r\n        return (\r\n          <>\r\n            <UploadMenu menuType={MenuType.Dropdown} {...props} />\r\n            <UrlMenu menuType={MenuType.Dropdown} {...props} />\r\n          </>\r\n        );\r\n    }\r\n  }\r\n\r\n  function mobileMenus() {\r\n    return (\r\n      <>\r\n        <Dropdown\r\n          trigger={\r\n            <div>\r\n              <Icon name=\"sidebar\" />\r\n            </div>\r\n          }\r\n          className=\"item\"\r\n          icon={null}\r\n        >\r\n          <Dropdown.Menu>\r\n            {/*fileMenus(ScreenSize.SMALL)*/}\r\n            {chartMenus(ScreenSize.SMALL)}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        {/*titleMenu()*/}\r\n        {aboutMenu()}\r\n      </>\r\n    );\r\n  }\r\n\r\n  function desktopMenus() {\r\n    return (\r\n      <>\r\n        {/*titleMenu()*/}\r\n        {/*fileMenus(ScreenSize.LARGE)*/}\r\n        {chartMenus(ScreenSize.LARGE)}\r\n        {aboutMenu()}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Menu\r\n        as={Media}\r\n        greaterThanOrEqual=\"large\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"blue\"\r\n        size=\"large\"\r\n      >\r\n        {desktopMenus()}\r\n      </Menu>\r\n      <Menu\r\n        as={Media}\r\n        at=\"small\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"blue\"\r\n        size=\"large\"\r\n      >\r\n        {mobileMenus()}\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n","import {Item, Checkbox, Form, Header} from 'semantic-ui-react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport { ParsedQuery } from 'query-string';\r\nimport * as queryString from 'query-string';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\nexport enum ChartColors {\r\n  NO_COLOR,\r\n  COLOR_BY_SEX,\r\n  COLOR_BY_GENERATION,\r\n}\r\n\r\nexport enum ChartViews {\r\n  HOURGLASS,\r\n  RELATIVES,\r\n  FANCY\r\n}\r\n\r\nexport interface Config {\r\n  color: ChartColors;\r\n  view: ChartViews;\r\n}\r\n\r\nexport const DEFALUT_CONFIG: Config = {\r\n  color: ChartColors.COLOR_BY_GENERATION,\r\n  view: ChartViews.HOURGLASS\r\n};\r\n\r\nconst COLOR_ARG = new Map<string, ChartColors>([\r\n  ['n', ChartColors.NO_COLOR],\r\n  ['g', ChartColors.COLOR_BY_GENERATION],\r\n  ['s', ChartColors.COLOR_BY_SEX],\r\n]);\r\nconst COLOR_ARG_INVERSE = new Map<ChartColors, string>();\r\nCOLOR_ARG.forEach((v, k) => COLOR_ARG_INVERSE.set(v, k));\r\n\r\nexport function argsToConfig(args: ParsedQuery<any>): Config {\r\n  const getParam = (name: string) => {\r\n    const value = args[name];\r\n    return typeof value === 'string' ? value : undefined;\r\n  };\r\n\r\n  return {\r\n    color: COLOR_ARG.get(getParam('c') ?? '') ?? DEFALUT_CONFIG.color,\r\n    view: DEFALUT_CONFIG.view\r\n  };\r\n}\r\n\r\nexport function configToArgs(config: Config): ParsedQuery<any> {\r\n  return {c: COLOR_ARG_INVERSE.get(config.color)};\r\n}\r\n\r\nexport function ConfigPanel(props: {\r\n  config: Config;\r\n  onChange: (config: Config) => void;\r\n}) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  function changeView(view: string) {\r\n    const search = queryString.parse(location.search);\r\n    if (search.view !== view) {\r\n      search.view = view;\r\n      location.search = queryString.stringify(search);\r\n      history.push(location);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form className=\"details\">\r\n      <Item.Group>\r\n        <Item>\r\n          <Item.Content>\r\n            <Header sub>\r\n              <FormattedMessage id=\"config.colors\" defaultMessage=\"Colors\" />\r\n            </Header>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"config.colors.NO_COLOR\"\r\n                    defaultMessage=\"none\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"none\"\r\n                checked={props.config.color === ChartColors.NO_COLOR}\r\n                onClick={() => props.onChange({ color: ChartColors.NO_COLOR, view: props.config.view })}\r\n              />\r\n            </Form.Field>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"config.colors.COLOR_BY_GENERATION\"\r\n                    defaultMessage=\"by generation\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"generation\"\r\n                checked={props.config.color === ChartColors.COLOR_BY_GENERATION}\r\n                onClick={() =>\r\n                  props.onChange({ color: ChartColors.COLOR_BY_GENERATION, view: props.config.view})\r\n                }\r\n              />\r\n            </Form.Field>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"config.colors.COLOR_BY_SEX\"\r\n                    defaultMessage=\"by sex\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"gender\"\r\n                checked={props.config.color === ChartColors.COLOR_BY_SEX}\r\n                onClick={() =>\r\n                  props.onChange({ color: ChartColors.COLOR_BY_SEX, view: props.config.view})\r\n                }\r\n              />\r\n            </Form.Field>\r\n          </Item.Content>\r\n        </Item>\r\n        <Item>\r\n          <Item.Content>\r\n            <Header sub>\r\n              <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\r\n            </Header>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"menu.hourglass\"\r\n                    defaultMessage=\"Hourglass chart\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"hourglass\"\r\n                checked={props.config.view === ChartViews.HOURGLASS}\r\n                onClick={() => { props.config.view = ChartViews.HOURGLASS; changeView('hourglass') }}\r\n              />\r\n            </Form.Field>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"menu.relatives\"\r\n                    defaultMessage=\"All relatives\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"relatives\"\r\n                checked={props.config.view === ChartViews.RELATIVES}\r\n\r\n                onClick={() => { props.config.view = ChartViews.RELATIVES; changeView('relatives') }}\r\n              />\r\n            </Form.Field>\r\n            <Form.Field className=\"no-margin\">\r\n              <Checkbox\r\n                radio\r\n                label={\r\n                  <FormattedMessage\r\n                    tagName=\"label\"\r\n                    id=\"menu.fancy\"\r\n                    defaultMessage=\"Fancy tree (experimental)\"\r\n                  />\r\n                }\r\n                name=\"checkboxRadioGroup\"\r\n                value=\"fancy\" checked={props.config.view === ChartViews.FANCY}\r\n                onClick={() => { props.config.view = ChartViews.FANCY; changeView('fancy') }}\r\n              />\r\n            </Form.Field>\r\n          </Item.Content>\r\n          </Item>\r\n      </Item.Group>\r\n    </Form>\r\n  );\r\n}\r\n","import {ChartColors} from './config';\r\nimport {interpolateNumber} from 'd3-interpolate';\r\nimport {IntlShape, useIntl} from 'react-intl';\r\nimport {max, min} from 'd3-array';\r\nimport {Media} from './util/media';\r\nimport {saveAs} from 'file-saver';\r\nimport {select, Selection} from 'd3-selection';\r\nimport {useEffect, useRef} from 'react';\r\nimport 'd3-transition';\r\nimport {\r\n  D3ZoomEvent,\r\n  zoom,\r\n  ZoomBehavior,\r\n  ZoomedElementBaseType,\r\n  zoomTransform,\r\n} from 'd3-zoom';\r\nimport {\r\n  JsonGedcomData,\r\n  ChartHandle,\r\n  IndiInfo,\r\n  createChart,\r\n  DetailedRenderer,\r\n  HourglassChart,\r\n  RelativesChart,\r\n  FancyChart,\r\n  CircleRenderer,\r\n  ChartColors as TopolaChartColors,\r\n} from 'topola';\r\n\r\n/** How much to zoom when using the +/- buttons. */\r\nconst ZOOM_FACTOR = 1.3;\r\n\r\n/**\r\n * Called when the view is dragged with the mouse.\r\n *\r\n * @param size the size of the chart\r\n */\r\nfunction zoomed(\r\n  size: [number, number],\r\n  event: D3ZoomEvent<ZoomedElementBaseType, unknown>,\r\n) {\r\n  const parent = select('#svgContainer').node() as Element;\r\n\r\n  const scale = event.transform.k;\r\n  const offsetX = max([0, (parent.clientWidth - size[0] * scale) / 2]);\r\n  const offsetY = max([0, (parent.clientHeight - size[1] * scale) / 2]);\r\n  select('#chartSvg')\r\n    .attr('width', size[0] * scale)\r\n    .attr('height', size[1] * scale)\r\n    .attr('transform', `translate(${offsetX}, ${offsetY})`);\r\n  select('#chart').attr('transform', `scale(${scale})`);\r\n\r\n  parent.scrollLeft = -event.transform.x;\r\n  parent.scrollTop = -event.transform.y;\r\n}\r\n\r\n/** Called when the scrollbars are used. */\r\nfunction scrolled() {\r\n  const parent = select('#svgContainer').node() as Element;\r\n  const x = parent.scrollLeft + parent.clientWidth / 2;\r\n  const y = parent.scrollTop + parent.clientHeight / 2;\r\n  const scale = zoomTransform(parent).k;\r\n  select(parent).call(zoom().translateTo, x / scale, y / scale);\r\n}\r\n\r\n/** Loads blob as data URL. */\r\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(blob);\r\n  return new Promise<string>((resolve, reject) => {\r\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\r\n  });\r\n}\r\n\r\nasync function inlineImage(image: SVGImageElement) {\r\n  const href = image.href.baseVal;\r\n  if (!href) {\r\n    return;\r\n  }\r\n  try {\r\n    const response = await fetch(href);\r\n    const blob = await response.blob();\r\n    const dataUrl = await loadAsDataUrl(blob);\r\n    image.href.baseVal = dataUrl;\r\n  } catch (e) {\r\n    console.warn('Failed to load image:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches all images in the SVG and replaces them with inlined images as data\r\n * URLs. Images are replaced in place. The replacement is done, the returned\r\n * promise is resolved.\r\n */\r\nasync function inlineImages(svg: Element): Promise<void> {\r\n  const images = Array.from(svg.getElementsByTagName('image'));\r\n  await Promise.all(images.map(inlineImage));\r\n}\r\n\r\n/** Loads a blob into an image object. */\r\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\r\n  const image = new Image();\r\n  image.src = URL.createObjectURL(blob);\r\n  return new Promise<HTMLImageElement>((resolve, reject) => {\r\n    image.addEventListener('load', () => resolve(image));\r\n  });\r\n}\r\n\r\n/** Draw image on a new canvas and return the canvas. */\r\nfunction drawImageOnCanvas(image: HTMLImageElement) {\r\n  const canvas = document.createElement('canvas');\r\n  // Scale image for better quality.\r\n  canvas.width = image.width * 2;\r\n  canvas.height = image.height * 2;\r\n\r\n  const ctx = canvas.getContext('2d')!;\r\n  const oldFill = ctx.fillStyle;\r\n  ctx.fillStyle = 'white';\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  ctx.fillStyle = oldFill;\r\n\r\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n  return canvas;\r\n}\r\n\r\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\r\n  return new Promise<Blob>((resolve, reject) => {\r\n    canvas.toBlob((blob) => {\r\n      if (blob) {\r\n        resolve(blob);\r\n      } else {\r\n        reject();\r\n      }\r\n    }, type);\r\n  });\r\n}\r\n\r\n/** Return a copy of the SVG chart but without scaling and positioning. */\r\nfunction getStrippedSvg() {\r\n  const svg = document.getElementById('chartSvg')!.cloneNode(true) as Element;\r\n\r\n  svg.removeAttribute('transform');\r\n  const parent = select('#svgContainer').node() as Element;\r\n  const scale = zoomTransform(parent).k;\r\n  svg.setAttribute('width', String(Number(svg.getAttribute('width')) / scale));\r\n  svg.setAttribute(\r\n    'height',\r\n    String(Number(svg.getAttribute('height')) / scale),\r\n  );\r\n  svg.querySelector('#chart')!.removeAttribute('transform');\r\n\r\n  return svg;\r\n}\r\n\r\nfunction getSvgContents() {\r\n  return new XMLSerializer().serializeToString(getStrippedSvg());\r\n}\r\n\r\nasync function getSvgContentsWithInlinedImages() {\r\n  const svg = getStrippedSvg();\r\n  await inlineImages(svg);\r\n  return new XMLSerializer().serializeToString(svg);\r\n}\r\n\r\n/** Shows the print dialog to print the currently displayed chart. */\r\nexport function printChart() {\r\n  const printWindow = document.createElement('iframe');\r\n  printWindow.style.position = 'absolute';\r\n  printWindow.style.top = '-1000px';\r\n  printWindow.style.left = '-1000px';\r\n  printWindow.onload = () => {\r\n    printWindow.contentDocument!.open();\r\n    printWindow.contentDocument!.write(getSvgContents());\r\n    printWindow.contentDocument!.close();\r\n    // Doesn't work on Firefox without the setTimeout.\r\n    setTimeout(() => {\r\n      printWindow.contentWindow!.focus();\r\n      printWindow.contentWindow!.print();\r\n      printWindow.parentNode!.removeChild(printWindow);\r\n    }, 500);\r\n  };\r\n  document.body.appendChild(printWindow);\r\n}\r\n\r\nexport async function downloadSvg() {\r\n  const contents = await getSvgContentsWithInlinedImages();\r\n  const blob = new Blob([contents], {type: 'image/svg+xml'});\r\n  saveAs(blob, 'topola.svg');\r\n}\r\n\r\nasync function drawOnCanvas(): Promise<HTMLCanvasElement> {\r\n  const contents = await getSvgContentsWithInlinedImages();\r\n  const blob = new Blob([contents], {type: 'image/svg+xml'});\r\n  return drawImageOnCanvas(await loadImage(blob));\r\n}\r\n\r\nexport async function downloadPng() {\r\n  const canvas = await drawOnCanvas();\r\n  const blob = await canvasToBlob(canvas, 'image/png');\r\n  saveAs(blob, 'topola.png');\r\n}\r\n\r\nexport async function downloadPdf() {\r\n  // Lazy load jspdf.\r\n  const {default: jspdf} = await import('jspdf');\r\n  const canvas = await drawOnCanvas();\r\n  const doc = new jspdf({\r\n    orientation: canvas.width > canvas.height ? 'l' : 'p',\r\n    unit: 'pt',\r\n    format: [canvas.width, canvas.height],\r\n  });\r\n  doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\r\n  doc.save('topola.pdf');\r\n}\r\n\r\n/** Supported chart types. */\r\nexport enum ChartType {\r\n  Hourglass,\r\n  Relatives,\r\n  Fancy,\r\n}\r\n\r\nconst chartColors = new Map<ChartColors, TopolaChartColors>([\r\n  [ChartColors.NO_COLOR, TopolaChartColors.NO_COLOR],\r\n  [ChartColors.COLOR_BY_GENERATION, TopolaChartColors.COLOR_BY_GENERATION],\r\n  [ChartColors.COLOR_BY_SEX, TopolaChartColors.COLOR_BY_SEX],\r\n]);\r\n\r\nfunction getChartType(chartType: ChartType) {\r\n  switch (chartType) {\r\n    case ChartType.Hourglass:\r\n      return HourglassChart;\r\n    case ChartType.Relatives:\r\n      return RelativesChart;\r\n    case ChartType.Fancy:\r\n      return FancyChart;\r\n    default:\r\n      // Fall back to hourglass chart.\r\n      return HourglassChart;\r\n  }\r\n}\r\n\r\nfunction getRendererType(chartType: ChartType) {\r\n  switch (chartType) {\r\n    case ChartType.Fancy:\r\n      return CircleRenderer;\r\n    default:\r\n      // Use DetailedRenderer by default.\r\n      return DetailedRenderer;\r\n  }\r\n}\r\n\r\nexport interface ChartProps {\r\n  data: JsonGedcomData;\r\n  selection: IndiInfo;\r\n  chartType: ChartType;\r\n  onSelection: (indiInfo: IndiInfo) => void;\r\n  freezeAnimation?: boolean;\r\n  colors?: ChartColors;\r\n}\r\n\r\nclass ChartWrapper {\r\n  private chart?: ChartHandle;\r\n  /** Animation is in progress. */\r\n  private animating = false;\r\n  /** Rendering is required after the current animation finishes. */\r\n  private rerenderRequired = false;\r\n  /** The d3 zoom behavior object. */\r\n  private zoomBehavior?: ZoomBehavior<Element, any>;\r\n  /** Props that will be used for rerendering. */\r\n  private rerenderProps?: ChartProps;\r\n  private rerenderResetPosition?: boolean;\r\n\r\n  zoom(factor: number) {\r\n    const parent = select('#svgContainer') as Selection<Element, any, any, any>;\r\n    this.zoomBehavior!.scaleBy(parent, factor);\r\n  }\r\n\r\n  /**\r\n   * Renders the chart or performs a transition animation to a new state.\r\n   * If indiInfo is not given, it means that it is the initial render and no\r\n   * animation is performed.\r\n   */\r\n  renderChart(\r\n    props: ChartProps,\r\n    intl: IntlShape,\r\n    args: {initialRender: boolean; resetPosition: boolean} = {\r\n      initialRender: false,\r\n      resetPosition: false,\r\n    },\r\n  ) {\r\n    // Wait for animation to finish if animation is in progress.\r\n    if (!args.initialRender && this.animating) {\r\n      this.rerenderRequired = true;\r\n      this.rerenderProps = props;\r\n      this.rerenderResetPosition = args.resetPosition;\r\n      return;\r\n    }\r\n\r\n    // Freeze changing selection after initial rendering.\r\n    if (!args.initialRender && props.freezeAnimation) {\r\n      return;\r\n    }\r\n\r\n    if (args.initialRender) {\r\n      (select('#chart').node() as HTMLElement).innerHTML = '';\r\n      this.chart = createChart({\r\n        json: props.data,\r\n        chartType: getChartType(props.chartType),\r\n        renderer: getRendererType(props.chartType),\r\n        svgSelector: '#chart',\r\n        indiCallback: (info) => props.onSelection(info),\r\n        colors: chartColors.get(props.colors!),\r\n        animate: true,\r\n        updateSvgSize: false,\r\n        locale: intl.locale,\r\n      });\r\n    } else {\r\n      this.chart!.setData(props.data);\r\n    }\r\n    const chartInfo = this.chart!.render({\r\n      startIndi: props.selection.id,\r\n      baseGeneration: props.selection.generation,\r\n    });\r\n    const svg = select('#chartSvg');\r\n    const parent = select('#svgContainer').node() as Element;\r\n\r\n    const scale = zoomTransform(parent).k;\r\n    const zoomOutFactor = min([\r\n      1,\r\n      scale,\r\n      parent.clientWidth / chartInfo.size[0],\r\n      parent.clientHeight / chartInfo.size[1],\r\n    ])!;\r\n    const extent: [number, number] = [max([0.1, zoomOutFactor])!, 2];\r\n\r\n    this.zoomBehavior = zoom()\r\n      .scaleExtent(extent)\r\n      .translateExtent([[0, 0], chartInfo.size])\r\n      .on('zoom', (event) => zoomed(chartInfo.size, event));\r\n    select(parent).on('scroll', scrolled).call(this.zoomBehavior);\r\n\r\n    const scrollTopTween = (scrollTop: number) => {\r\n      return () => {\r\n        const i = interpolateNumber(parent.scrollTop, scrollTop);\r\n        return (t: number) => {\r\n          parent.scrollTop = i(t);\r\n        };\r\n      };\r\n    };\r\n    const scrollLeftTween = (scrollLeft: number) => {\r\n      return () => {\r\n        const i = interpolateNumber(parent.scrollLeft, scrollLeft);\r\n        return (t: number) => {\r\n          parent.scrollLeft = i(t);\r\n        };\r\n      };\r\n    };\r\n\r\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0] * scale;\r\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1] * scale;\r\n    const offsetX = max([\r\n      0,\r\n      (parent.clientWidth - chartInfo.size[0] * scale) / 2,\r\n    ]);\r\n    const offsetY = max([\r\n      0,\r\n      (parent.clientHeight - chartInfo.size[1] * scale) / 2,\r\n    ]);\r\n    const svgTransition = svg.transition().delay(200).duration(500);\r\n    const transition = args.initialRender ? svg : svgTransition;\r\n    transition\r\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\r\n      .attr('width', chartInfo.size[0] * scale)\r\n      .attr('height', chartInfo.size[1] * scale);\r\n    if (args.resetPosition) {\r\n      if (args.initialRender) {\r\n        parent.scrollLeft = -dx;\r\n        parent.scrollTop = -dy;\r\n      } else {\r\n        svgTransition\r\n          .tween('scrollLeft', scrollLeftTween(-dx))\r\n          .tween('scrollTop', scrollTopTween(-dy));\r\n      }\r\n    }\r\n\r\n    // After the animation is finished, rerender the chart if required.\r\n    this.animating = true;\r\n    chartInfo.animationPromise.then(() => {\r\n      this.animating = false;\r\n      if (this.rerenderRequired) {\r\n        this.rerenderRequired = false;\r\n        // Use `this.rerenderProps` instead of the props in scope because\r\n        // the props may have been updated in the meantime.\r\n        this.renderChart(this.rerenderProps!, intl, {\r\n          initialRender: false,\r\n          resetPosition: !!this.rerenderResetPosition,\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport function Chart(props: ChartProps) {\r\n  const chartWrapper = useRef(new ChartWrapper());\r\n  const prevProps = usePrevious(props);\r\n  const intl = useIntl();\r\n\r\n  useEffect(() => {\r\n    if (prevProps) {\r\n      const initialRender =\r\n        props.chartType !== prevProps?.chartType ||\r\n        props.colors !== prevProps?.colors;\r\n      const resetPosition =\r\n        props.chartType !== prevProps?.chartType ||\r\n        props.data !== prevProps.data ||\r\n        props.selection !== prevProps.selection;\r\n      chartWrapper.current.renderChart(props, intl, {\r\n        initialRender,\r\n        resetPosition,\r\n      });\r\n    } else {\r\n      chartWrapper.current.renderChart(props, intl, {\r\n        initialRender: true,\r\n        resetPosition: true,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"svgContainer\">\r\n      <Media greaterThanOrEqual=\"large\" className=\"zoom\">\r\n        <button\r\n          className=\"zoom-in\"\r\n          onClick={() => chartWrapper.current.zoom(ZOOM_FACTOR)}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          className=\"zoom-out\"\r\n          onClick={() => chartWrapper.current.zoom(1 / ZOOM_FACTOR)}\r\n        >\r\n          −\r\n        </button>\r\n      </Media>\r\n      <svg id=\"chartSvg\">\r\n        <g id=\"chart\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import Cookies from 'js-cookie';\r\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\r\nimport {\r\n  Date,\r\n  DateOrRange,\r\n  JsonEvent,\r\n  JsonFam,\r\n  JsonGedcomData,\r\n  JsonImage,\r\n  JsonIndi,\r\n} from 'topola';\r\nimport {GedcomData, normalizeGedcom, TopolaData} from '../util/gedcom_util';\r\nimport {GedcomEntry} from 'parse-gedcom';\r\nimport {IntlShape} from 'react-intl';\r\nimport {TopolaError} from '../util/error';\r\nimport {isValidDateOrRange} from '../util/date_util';\r\n\r\n/** Prefix for IDs of private individuals. */\r\nexport const PRIVATE_ID_PREFIX = '~Private';\r\n\r\n/**\r\n * Cookie where the logged in user name is stored. This cookie is shared\r\n * between apps hosted on apps.wikitree.com.\r\n */\r\nconst USER_NAME_COOKIE = 'wikidb_wtb_UserName';\r\n\r\n/** WikiTree API getAncestors request. */\r\ninterface GetAncestorsRequest {\r\n  action: 'getAncestors';\r\n  key: string;\r\n  fields: string;\r\n}\r\n\r\n/** WikiTree API getRelatives request. */\r\ninterface GetRelativesRequest {\r\n  action: 'getRelatives';\r\n  keys: string;\r\n  getChildren?: true;\r\n  getSpouses?: true;\r\n}\r\n\r\n/** WikiTree API clientLogin request. */\r\ninterface ClientLoginRequest {\r\n  action: 'clientLogin';\r\n  authcode: string;\r\n}\r\n\r\n/** WikiTree API clientLogin response. */\r\ninterface ClientLoginResponse {\r\n  result: string;\r\n  username: string;\r\n}\r\n\r\ntype WikiTreeRequest =\r\n  | GetAncestorsRequest\r\n  | GetRelativesRequest\r\n  | ClientLoginRequest;\r\n\r\n/** Person structure returned from WikiTree API. */\r\ninterface Person {\r\n  Id: number;\r\n  Name: string;\r\n  FirstName: string;\r\n  LastNameAtBirth: string;\r\n  RealName: string;\r\n  Spouses?: {[key: number]: Person};\r\n  Children: {[key: number]: Person};\r\n  Mother: number;\r\n  Father: number;\r\n  Gender: string;\r\n  BirthDate: string;\r\n  DeathDate: string;\r\n  BirthLocation: string;\r\n  DeathLocation: string;\r\n  BirthDateDecade: string;\r\n  DeathDateDecade: string;\r\n  marriage_location: string;\r\n  marriage_date: string;\r\n  DataStatus?: {\r\n    BirthDate: string;\r\n    DeathDate: string;\r\n  };\r\n  Photo: string;\r\n  PhotoData?: {\r\n    path: string;\r\n    url: string;\r\n  };\r\n}\r\n\r\n/** Gets item from session storage. Logs exception if one is thrown. */\r\nfunction getSessionStorageItem(key: string): string | null {\r\n  try {\r\n    return sessionStorage.getItem(key);\r\n  } catch (e) {\r\n    console.warn('Failed to load data from session storage: ' + e);\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Sets item in session storage. Logs exception if one is thrown. */\r\nfunction setSessionStorageItem(key: string, value: string) {\r\n  try {\r\n    sessionStorage.setItem(key, value);\r\n  } catch (e) {\r\n    console.warn('Failed to store data in session storage: ' + e);\r\n  }\r\n}\r\n\r\n/** Sends a request to the WikiTree API. Returns the parsed response JSON. */\r\nasync function wikiTreeGet(request: WikiTreeRequest, handleCors: boolean) {\r\n  const requestData = new FormData();\r\n  requestData.append('format', 'json');\r\n  for (const key in request) {\r\n    requestData.append(key, request[key]);\r\n  }\r\n  const apiUrl = handleCors\r\n    ? 'https://topola-cors.herokuapp.com/https://api.wikitree.com/api.php'\r\n    : 'https://api.wikitree.com/api.php';\r\n  const response = await window.fetch(apiUrl, {\r\n    method: 'POST',\r\n    body: requestData,\r\n    credentials: handleCors ? undefined : 'include',\r\n  });\r\n  const responseBody = await response.text();\r\n  return JSON.parse(responseBody);\r\n}\r\n\r\n/**\r\n * Retrieves ancestors from WikiTree for the given person ID.\r\n * Uses sessionStorage for caching responses.\r\n */\r\nasync function getAncestors(\r\n  key: string,\r\n  handleCors: boolean,\r\n): Promise<Person[]> {\r\n  const cacheKey = `wikitree:ancestors:${key}`;\r\n  const cachedData = getSessionStorageItem(cacheKey);\r\n  if (cachedData) {\r\n    return JSON.parse(cachedData);\r\n  }\r\n  const response = await wikiTreeGet(\r\n    {\r\n      action: 'getAncestors',\r\n      key: key,\r\n      fields: '*',\r\n    },\r\n    handleCors,\r\n  );\r\n  const result = response[0].ancestors as Person[];\r\n  setSessionStorageItem(cacheKey, JSON.stringify(result));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Retrieves relatives from WikiTree for the given array of person IDs.\r\n * Uses sessionStorage for caching responses.\r\n */\r\nasync function getRelatives(\r\n  keys: string[],\r\n  handleCors: boolean,\r\n): Promise<Person[]> {\r\n  const result: Person[] = [];\r\n  const keysToFetch: string[] = [];\r\n  keys.forEach((key) => {\r\n    const cachedData = getSessionStorageItem(`wikitree:relatives:${key}`);\r\n    if (cachedData) {\r\n      result.push(JSON.parse(cachedData));\r\n    } else {\r\n      keysToFetch.push(key);\r\n    }\r\n  });\r\n  if (keysToFetch.length === 0) {\r\n    return result;\r\n  }\r\n  const response = await wikiTreeGet(\r\n    {\r\n      action: 'getRelatives',\r\n      keys: keysToFetch.join(','),\r\n      getChildren: true,\r\n      getSpouses: true,\r\n    },\r\n    handleCors,\r\n  );\r\n  if (response[0].items === null) {\r\n    const id = keysToFetch[0];\r\n    throw new TopolaError(\r\n      'WIKITREE_PROFILE_NOT_FOUND',\r\n      `WikiTree profile ${id} not found`,\r\n      {id},\r\n    );\r\n  }\r\n  const fetchedResults = response[0].items.map(\r\n    (x: {person: Person}) => x.person,\r\n  ) as Person[];\r\n  fetchedResults.forEach((person) => {\r\n    setSessionStorageItem(\r\n      `wikitree:relatives:${person.Name}`,\r\n      JSON.stringify(person),\r\n    );\r\n  });\r\n  return result.concat(fetchedResults);\r\n}\r\n\r\nexport async function clientLogin(\r\n  authcode: string,\r\n): Promise<ClientLoginResponse> {\r\n  const response = await wikiTreeGet(\r\n    {\r\n      action: 'clientLogin',\r\n      authcode,\r\n    },\r\n    false,\r\n  );\r\n  return response.clientLogin;\r\n}\r\n\r\n/**\r\n * Returns the logged in user name or undefined if not logged in.\r\n *\r\n * This is not an authoritative answer. The result of this function relies on\r\n * the cookies set on the apps.wikitree.com domain under which this application\r\n * is hosted. The authoritative source of login information is in cookies set on\r\n * the api.wikitree.com domain.\r\n */\r\nexport function getLoggedInUserName(): string | undefined {\r\n  return Cookies.get(USER_NAME_COOKIE);\r\n}\r\n\r\n/**\r\n * Loads data from WikiTree to populate an hourglass chart starting from the\r\n * given person ID.\r\n */\r\nexport async function loadWikiTree(\r\n  key: string,\r\n  intl: IntlShape,\r\n  authcode?: string,\r\n): Promise<TopolaData> {\r\n  // Work around CORS if not in apps.wikitree.com domain.\r\n  const handleCors = window.location.hostname !== 'apps.wikitree.com';\r\n\r\n  if (!handleCors && !getLoggedInUserName() && authcode) {\r\n    const loginResult = await clientLogin(authcode);\r\n    if (loginResult.result === 'Success') {\r\n      sessionStorage.clear();\r\n      Cookies.set(USER_NAME_COOKIE, loginResult.username);\r\n    }\r\n  }\r\n\r\n  const everyone: Person[] = [];\r\n\r\n  // Fetch the ancestors of the input person and ancestors of his/her spouses.\r\n  const firstPerson = await getRelatives([key], handleCors);\r\n  if (!firstPerson[0].Name) {\r\n    const id = key;\r\n    throw new TopolaError(\r\n      'WIKITREE_PROFILE_NOT_ACCESSIBLE',\r\n      `WikiTree profile ${id} is not accessible. Try logging in.`,\r\n      {id},\r\n    );\r\n  }\r\n\r\n  const spouseKeys = Object.values(firstPerson[0].Spouses || {}).map(\r\n    (s) => s.Name,\r\n  );\r\n  const ancestors = await Promise.all(\r\n    [key]\r\n      .concat(spouseKeys)\r\n      .map((personId) => getAncestors(personId, handleCors)),\r\n  );\r\n  const ancestorKeys = ancestors\r\n    .flat()\r\n    .map((person) => person.Name)\r\n    .filter((key) => !!key);\r\n  const ancestorDetails = await getRelatives(ancestorKeys, handleCors);\r\n\r\n  // Map from person id to father id if the father profile is private.\r\n  const privateFathers: Map<number, number> = new Map();\r\n  // Map from person id to mother id if the mother profile is private.\r\n  const privateMothers: Map<number, number> = new Map();\r\n\r\n  // Andujst private individual ids so that there are no collisions in the case\r\n  // that ancestors were collected for more than one person.\r\n  ancestors.forEach((ancestorList, index) => {\r\n    const offset = 1000 * index;\r\n    // Adjust ids by offset.\r\n    ancestorList.forEach((person) => {\r\n      if (person.Id < 0) {\r\n        person.Id -= offset;\r\n        person.Name = `${PRIVATE_ID_PREFIX}${person.Id}`;\r\n      }\r\n      if (person.Father < 0) {\r\n        person.Father -= offset;\r\n        privateFathers.set(person.Id, person.Father);\r\n      }\r\n      if (person.Mother < 0) {\r\n        person.Mother -= offset;\r\n        privateMothers.set(person.Id, person.Mother);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Set the Father and Mother fields again because getRelatives doesn't return\r\n  // private parents.\r\n  ancestorDetails.forEach((person) => {\r\n    const privateFather = privateFathers.get(person.Id);\r\n    if (privateFather) {\r\n      person.Father = privateFather;\r\n    }\r\n    const privateMother = privateMothers.get(person.Id);\r\n    if (privateMother) {\r\n      person.Mother = privateMother;\r\n    }\r\n  });\r\n  everyone.push(...ancestorDetails);\r\n\r\n  // Collect private individuals.\r\n  const privateAncestors = ancestors.flat().filter((person) => person.Id < 0);\r\n  everyone.push(...privateAncestors);\r\n\r\n  // Limit the number of generations of descendants because there may be tens of\r\n  // generations for some profiles.\r\n  const descendantGenerationLimit = 5;\r\n\r\n  // Fetch descendants recursively.\r\n  let toFetch = [key];\r\n  let generation = 0;\r\n  while (toFetch.length > 0 && generation <= descendantGenerationLimit) {\r\n    const people = await getRelatives(toFetch, handleCors);\r\n    everyone.push(...people);\r\n    const allSpouses = people.flatMap((person) =>\r\n      Object.values(person.Spouses || {}),\r\n    );\r\n    everyone.push(...allSpouses);\r\n    // Fetch all children.\r\n    toFetch = people.flatMap((person) =>\r\n      Object.values(person.Children).map((c) => c.Name),\r\n    );\r\n    generation++;\r\n  }\r\n\r\n  // Map from person id to the set of families where they are a spouse.\r\n  const families = new Map<number, Set<string>>();\r\n  // Map from family id to the set of children.\r\n  const children = new Map<string, Set<number>>();\r\n  // Map from famliy id to the spouses.\r\n  const spouses = new Map<\r\n    string,\r\n    {wife?: number; husband?: number; spouse?: Person}\r\n  >();\r\n  // Map from numerical id to human-readable id.\r\n  const idToName = new Map<number, string>();\r\n  // Map from human-readable person id to fullSizeUrl of person photo.\r\n  const fullSizePhotoUrls: Map<string, string> = new Map();\r\n\r\n  everyone.forEach((person) => {\r\n    idToName.set(person.Id, person.Name);\r\n    if (person.Mother || person.Father) {\r\n      const famId = getFamilyId(person.Mother, person.Father);\r\n      getSet(families, person.Mother).add(famId);\r\n      getSet(families, person.Father).add(famId);\r\n      getSet(children, famId).add(person.Id);\r\n      spouses.set(famId, {\r\n        wife: person.Mother || undefined,\r\n        husband: person.Father || undefined,\r\n      });\r\n    }\r\n  });\r\n\r\n  const indis: JsonIndi[] = [];\r\n\r\n  const converted = new Set<number>();\r\n  everyone.forEach((person) => {\r\n    if (converted.has(person.Id)) {\r\n      return;\r\n    }\r\n    converted.add(person.Id);\r\n    const indi = convertPerson(person, intl);\r\n    if (person.PhotoData?.path) {\r\n      fullSizePhotoUrls.set(\r\n        person.Name,\r\n        `https://www.wikitree.com${person.PhotoData.path}`,\r\n      );\r\n    }\r\n    if (person.Spouses) {\r\n      Object.values(person.Spouses).forEach((spouse) => {\r\n        const famId = getFamilyId(person.Id, spouse.Id);\r\n        getSet(families, person.Id).add(famId);\r\n        getSet(families, spouse.Id).add(famId);\r\n        const familySpouses =\r\n          person.Gender === 'Male'\r\n            ? {wife: spouse.Id, husband: person.Id, spouse}\r\n            : {wife: person.Id, husband: spouse.Id, spouse};\r\n        spouses.set(famId, familySpouses);\r\n      });\r\n    }\r\n    indi.fams = Array.from(getSet(families, person.Id));\r\n    indis.push(indi);\r\n  });\r\n\r\n  const fams = Array.from(spouses.entries()).map(([key, value]) => {\r\n    const fam: JsonFam = {\r\n      id: key,\r\n    };\r\n    const wife = value.wife && idToName.get(value.wife);\r\n    if (wife) {\r\n      fam.wife = wife;\r\n    }\r\n    const husband = value.husband && idToName.get(value.husband);\r\n    if (husband) {\r\n      fam.husb = husband;\r\n    }\r\n    fam.children = Array.from(getSet(children, key)).map(\r\n      (child) => idToName.get(child)!,\r\n    );\r\n    if (\r\n      value.spouse &&\r\n      ((value.spouse.marriage_date &&\r\n        value.spouse.marriage_date !== '0000-00-00') ||\r\n        value.spouse.marriage_location)\r\n    ) {\r\n      const parsedDate = parseDate(value.spouse.marriage_date);\r\n      fam.marriage = Object.assign({}, parsedDate, {\r\n        place: value.spouse.marriage_location,\r\n      });\r\n    }\r\n    return fam;\r\n  });\r\n\r\n  const chartData = normalizeGedcom({indis, fams});\r\n  const gedcom = buildGedcom(chartData, fullSizePhotoUrls);\r\n  return {chartData, gedcom};\r\n}\r\n\r\n/** Creates a family identifier given 2 spouse identifiers. */\r\nfunction getFamilyId(spouse1: number, spouse2: number) {\r\n  if (spouse2 > spouse1) {\r\n    return `${spouse1}_${spouse2}`;\r\n  }\r\n  return `${spouse2}_${spouse1}`;\r\n}\r\n\r\nfunction convertPerson(person: Person, intl: IntlShape): JsonIndi {\r\n  const indi: JsonIndi = {\r\n    id: person.Name,\r\n  };\r\n  if (person.Name.startsWith(PRIVATE_ID_PREFIX)) {\r\n    indi.hideId = true;\r\n    indi.firstName = intl.formatMessage({\r\n      id: 'wikitree.private',\r\n      defaultMessage: 'Private',\r\n    });\r\n  }\r\n  if (person.FirstName && person.FirstName !== 'Unknown') {\r\n    indi.firstName = person.FirstName;\r\n  } else if (person.RealName && person.RealName !== 'Unknown') {\r\n    indi.firstName = person.RealName;\r\n  }\r\n  if (person.LastNameAtBirth !== 'Unknown') {\r\n    indi.lastName = person.LastNameAtBirth;\r\n  }\r\n  if (person.Mother || person.Father) {\r\n    indi.famc = getFamilyId(person.Mother, person.Father);\r\n  }\r\n  if (person.Gender === 'Male') {\r\n    indi.sex = 'M';\r\n  } else if (person.Gender === 'Female') {\r\n    indi.sex = 'F';\r\n  }\r\n  if (\r\n    (person.BirthDate && person.BirthDate !== '0000-00-00') ||\r\n    person.BirthLocation ||\r\n    person.BirthDateDecade !== 'unknown'\r\n  ) {\r\n    const parsedDate = parseDate(\r\n      person.BirthDate,\r\n      person.DataStatus && person.DataStatus.BirthDate,\r\n    );\r\n    const date = parsedDate || parseDecade(person.BirthDateDecade);\r\n    indi.birth = Object.assign({}, date, {place: person.BirthLocation});\r\n  }\r\n  if (\r\n    (person.DeathDate && person.DeathDate !== '0000-00-00') ||\r\n    person.DeathLocation ||\r\n    person.DeathDateDecade !== 'unknown'\r\n  ) {\r\n    const parsedDate = parseDate(\r\n      person.DeathDate,\r\n      person.DataStatus && person.DataStatus.DeathDate,\r\n    );\r\n    const date = parsedDate || parseDecade(person.DeathDateDecade);\r\n    indi.death = Object.assign({}, date, {place: person.DeathLocation});\r\n  }\r\n  if (person.PhotoData) {\r\n    indi.images = [\r\n      {\r\n        url: `https://www.wikitree.com${person.PhotoData.url}`,\r\n        title: person.Photo,\r\n      },\r\n    ];\r\n  }\r\n  return indi;\r\n}\r\n\r\n/**\r\n * Parses a date in the format returned by WikiTree and converts in to\r\n * the format defined by Topola.\r\n */\r\nfunction parseDate(date: string, dataStatus?: string): DateOrRange | undefined {\r\n  if (!date) {\r\n    return undefined;\r\n  }\r\n  const matchedDate = date.match(/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/);\r\n  if (!matchedDate) {\r\n    return {date: {text: date}};\r\n  }\r\n  const parsedDate: Date = {};\r\n  if (matchedDate[1] !== '0000') {\r\n    parsedDate.year = ~~matchedDate[1];\r\n  }\r\n  if (matchedDate[2] !== '00') {\r\n    parsedDate.month = ~~matchedDate[2];\r\n  }\r\n  if (matchedDate[3] !== '00') {\r\n    parsedDate.day = ~~matchedDate[3];\r\n  }\r\n  if (dataStatus === 'after') {\r\n    return {dateRange: {from: parsedDate}};\r\n  }\r\n  if (dataStatus === 'before') {\r\n    return {dateRange: {to: parsedDate}};\r\n  }\r\n  if (dataStatus === 'guess') {\r\n    parsedDate.qualifier = 'abt';\r\n  }\r\n  return {date: parsedDate};\r\n}\r\n\r\nfunction parseDecade(decade: string): DateOrRange | undefined {\r\n  return decade !== 'unknown' ? {date: {text: decade}} : undefined;\r\n}\r\n\r\nconst MONTHS = new Map<number, string>([\r\n  [1, 'JAN'],\r\n  [2, 'FEB'],\r\n  [3, 'MAR'],\r\n  [4, 'APR'],\r\n  [5, 'MAY'],\r\n  [6, 'JUN'],\r\n  [7, 'JUL'],\r\n  [8, 'AUG'],\r\n  [9, 'SEP'],\r\n  [10, 'OCT'],\r\n  [11, 'NOV'],\r\n  [12, 'DEC'],\r\n]);\r\n\r\nfunction dateToGedcom(date: Date): string {\r\n  return [date.qualifier, date.day, MONTHS.get(date.month!), date.year]\r\n    .filter((x) => x !== undefined)\r\n    .join(' ');\r\n}\r\n\r\nfunction dateOrRangeToGedcom(dateOrRange: DateOrRange): string {\r\n  if (dateOrRange.date) {\r\n    return dateToGedcom(dateOrRange.date);\r\n  }\r\n  if (!dateOrRange.dateRange) {\r\n    return '';\r\n  }\r\n  if (dateOrRange.dateRange.from && dateOrRange.dateRange.to) {\r\n    return `BET ${dateToGedcom(dateOrRange.dateRange.from)} AND ${\r\n      dateOrRange.dateRange.to\r\n    }`;\r\n  }\r\n  if (dateOrRange.dateRange.from) {\r\n    return `AFT ${dateToGedcom(dateOrRange.dateRange.from)}`;\r\n  }\r\n  if (dateOrRange.dateRange.to) {\r\n    return `BEF ${dateToGedcom(dateOrRange.dateRange.to)}`;\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction eventToGedcom(event: JsonEvent): GedcomEntry[] {\r\n  const result = [];\r\n  if (isValidDateOrRange(event)) {\r\n    result.push({\r\n      level: 2,\r\n      pointer: '',\r\n      tag: 'DATE',\r\n      data: dateOrRangeToGedcom(event),\r\n      tree: [],\r\n    });\r\n  }\r\n  if (event.place) {\r\n    result.push({\r\n      level: 2,\r\n      pointer: '',\r\n      tag: 'PLAC',\r\n      data: event.place,\r\n      tree: [],\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction imageToGedcom(\r\n  image: JsonImage,\r\n  fullSizePhotoUrl: string | undefined,\r\n): GedcomEntry[] {\r\n  return [\r\n    {\r\n      level: 2,\r\n      pointer: '',\r\n      tag: 'FILE',\r\n      data: fullSizePhotoUrl || image.url,\r\n      tree: [\r\n        {\r\n          level: 3,\r\n          pointer: '',\r\n          tag: 'FORM',\r\n          data: image.title?.split('.').pop() || '',\r\n          tree: [],\r\n        },\r\n        {\r\n          level: 3,\r\n          pointer: '',\r\n          tag: 'TITL',\r\n          data: image.title?.split('.')[0] || '',\r\n          tree: [],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction indiToGedcom(\r\n  indi: JsonIndi,\r\n  fullSizePhotoUrl: Map<string, string>,\r\n): GedcomEntry {\r\n  // WikiTree URLs replace spaces with underscores.\r\n  const escapedId = indi.id.replace(/ /g, '_');\r\n  const record: GedcomEntry = {\r\n    level: 0,\r\n    pointer: `@${indi.id}@`,\r\n    tag: 'INDI',\r\n    data: '',\r\n    tree: [\r\n      {\r\n        level: 1,\r\n        pointer: '',\r\n        tag: 'NAME',\r\n        data: `${indi.firstName || ''} /${indi.lastName || ''}/`,\r\n        tree: [],\r\n      },\r\n    ],\r\n  };\r\n  if (indi.birth) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'BIRT',\r\n      data: '',\r\n      tree: eventToGedcom(indi.birth),\r\n    });\r\n  }\r\n  if (indi.death) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'DEAT',\r\n      data: '',\r\n      tree: eventToGedcom(indi.death),\r\n    });\r\n  }\r\n  if (indi.famc) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'FAMC',\r\n      data: `@${indi.famc}@`,\r\n      tree: [],\r\n    });\r\n  }\r\n  (indi.fams || []).forEach((fams) =>\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'FAMS',\r\n      data: `@${fams}@`,\r\n      tree: [],\r\n    }),\r\n  );\r\n  if (!indi.id.startsWith('~')) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'WWW',\r\n      data: `https://www.wikitree.com/wiki/${escapedId}`,\r\n      tree: [],\r\n    });\r\n  }\r\n  (indi.images || []).forEach((image) => {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'OBJE',\r\n      data: '',\r\n      tree: imageToGedcom(image, fullSizePhotoUrl.get(indi.id)),\r\n    });\r\n  });\r\n  return record;\r\n}\r\n\r\nfunction famToGedcom(fam: JsonFam): GedcomEntry {\r\n  const record: GedcomEntry = {\r\n    level: 0,\r\n    pointer: `@${fam.id}@`,\r\n    tag: 'FAM',\r\n    data: '',\r\n    tree: [],\r\n  };\r\n  if (fam.wife) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'WIFE',\r\n      data: `@${fam.wife}@`,\r\n      tree: [],\r\n    });\r\n  }\r\n  if (fam.husb) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'HUSB',\r\n      data: `@${fam.husb}@`,\r\n      tree: [],\r\n    });\r\n  }\r\n  (fam.children || []).forEach((child) =>\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: child,\r\n      tag: 'CHILD',\r\n      data: '',\r\n      tree: [],\r\n    }),\r\n  );\r\n  if (fam.marriage) {\r\n    record.tree.push({\r\n      level: 1,\r\n      pointer: '',\r\n      tag: 'MARR',\r\n      data: '',\r\n      tree: eventToGedcom(fam.marriage),\r\n    });\r\n  }\r\n  return record;\r\n}\r\n\r\n/**\r\n * Creates a GEDCOM structure for the purpose of displaying the details\r\n * panel.\r\n */\r\nfunction buildGedcom(\r\n  data: JsonGedcomData,\r\n  fullSizePhotoUrls: Map<string, string>,\r\n): GedcomData {\r\n  const gedcomIndis: {[key: string]: GedcomEntry} = {};\r\n  const gedcomFams: {[key: string]: GedcomEntry} = {};\r\n  data.indis.forEach((indi) => {\r\n    gedcomIndis[indi.id] = indiToGedcom(indi, fullSizePhotoUrls);\r\n  });\r\n  data.fams.forEach((fam) => {\r\n    gedcomFams[fam.id] = famToGedcom(fam);\r\n  });\r\n\r\n  return {\r\n    head: {level: 0, pointer: '', tag: 'HEAD', data: '', tree: []},\r\n    indis: gedcomIndis,\r\n    fams: gedcomFams,\r\n    other: {},\r\n  };\r\n}\r\n\r\n/**\r\n * Returns a set which is a value from a SetMultimap. If the key doesn't exist,\r\n * an empty set is added to the map.\r\n */\r\nfunction getSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\r\n  const set = map.get(key);\r\n  if (set) {\r\n    return set;\r\n  }\r\n  const newSet = new Set<V>();\r\n  map.set(key, newSet);\r\n  return newSet;\r\n}\r\n\r\nexport interface WikiTreeSourceSpec {\r\n  source: DataSourceEnum.WIKITREE;\r\n  authcode?: string;\r\n}\r\n\r\n/** Loading data from the WikiTree API. */\r\nexport class WikiTreeDataSource implements DataSource<WikiTreeSourceSpec> {\r\n  constructor(private intl: IntlShape) {}\r\n\r\n  isNewData(\r\n    newSource: SourceSelection<WikiTreeSourceSpec>,\r\n    oldSource: SourceSelection<WikiTreeSourceSpec>,\r\n    data?: TopolaData,\r\n  ): boolean {\r\n    if (!newSource.selection) {\r\n      return false;\r\n    }\r\n    if (oldSource.selection?.id === newSource.selection.id) {\r\n      // Selection unchanged -> don't reload.\r\n      return false;\r\n    }\r\n    if (\r\n      data &&\r\n      data.chartData.indis.some((indi) => indi.id === newSource.selection?.id)\r\n    ) {\r\n      // New selection exists in current view -> animate instead of reloading.\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async loadData(\r\n    source: SourceSelection<WikiTreeSourceSpec>,\r\n  ): Promise<TopolaData> {\r\n    if (!source.selection) {\r\n      throw new TopolaError(\r\n        'WIKITREE_ID_NOT_PROVIDED',\r\n        'WikiTree id needs to be provided',\r\n      );\r\n    }\r\n    try {\r\n      const data = await loadWikiTree(\r\n        source.selection.id,\r\n        this.intl,\r\n        source.spec.authcode,\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import * as H from 'history';\r\nimport * as queryString from 'query-string';\r\nimport {Changelog} from './changelog';\r\nimport {DataSourceEnum, SourceSelection} from './datasource/data_source';\r\nimport {Details} from './details/details';\r\nimport {EmbeddedDataSource, EmbeddedSourceSpec} from './datasource/embedded';\r\nimport {FormattedMessage, useIntl} from 'react-intl';\r\nimport {getI18nMessage} from './util/error_i18n';\r\nimport {IndiInfo} from 'topola';\r\nimport {Intro} from './intro';\r\nimport {Loader, Message, Portal, Tab} from 'semantic-ui-react';\r\nimport {Media} from './util/media';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {TopBar} from './menu/top_bar';\r\nimport {TopolaData} from './util/gedcom_util';\r\nimport {useEffect, useState} from 'react';\r\nimport {useHistory, useLocation} from 'react-router';\r\nimport {\r\n  Chart,\r\n  ChartType,\r\n  downloadPdf,\r\n  downloadPng,\r\n  downloadSvg,\r\n  printChart,\r\n} from './chart';\r\nimport {\r\n  argsToConfig,\r\n  Config,\r\n  ConfigPanel,\r\n  configToArgs,\r\n  DEFALUT_CONFIG,\r\n} from './config';\r\nimport {\r\n  getSelection,\r\n  UploadSourceSpec,\r\n  UrlSourceSpec,\r\n  GedcomUrlDataSource,\r\n  UploadedDataSource,\r\n} from './datasource/load_data';\r\nimport {\r\n  loadWikiTree,\r\n  PRIVATE_ID_PREFIX,\r\n  WikiTreeDataSource,\r\n  WikiTreeSourceSpec,\r\n} from './datasource/wikitree';\r\n\r\n/** Shows an error message in the middle of the screen. */\r\nfunction ErrorMessage(props: {message?: string}) {\r\n  return (\r\n    <Message negative className=\"error\">\r\n      <Message.Header>\r\n        <FormattedMessage\r\n          id=\"error.failed_to_load_file\"\r\n          defaultMessage={'Failed to load file'}\r\n        />\r\n      </Message.Header>\r\n      <p>{props.message}</p>\r\n    </Message>\r\n  );\r\n}\r\n\r\ninterface ErrorPopupProps {\r\n  message?: string;\r\n  open: boolean;\r\n  onDismiss: () => void;\r\n}\r\n\r\n/**\r\n * Shows a dismissable error message in the bottom left corner of the screen.\r\n */\r\nfunction ErrorPopup(props: ErrorPopupProps) {\r\n  return (\r\n    <Portal open={props.open} onClose={props.onDismiss}>\r\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\r\n        <Message.Header>\r\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\r\n        </Message.Header>\r\n        <p>{props.message}</p>\r\n      </Message>\r\n    </Portal>\r\n  );\r\n}\r\n\r\nenum AppState {\r\n  INITIAL,\r\n  LOADING,\r\n  ERROR,\r\n  SHOWING_CHART,\r\n  LOADING_MORE,\r\n}\r\n\r\ntype DataSourceSpec =\r\n  | UrlSourceSpec\r\n  | UploadSourceSpec\r\n  | WikiTreeSourceSpec\r\n  | EmbeddedSourceSpec;\r\n\r\n/**\r\n * Arguments passed to the application, primarily through URL parameters.\r\n * Non-optional arguments get populated with default values.\r\n */\r\ninterface Arguments {\r\n  sourceSpec?: DataSourceSpec;\r\n  selection?: IndiInfo;\r\n  chartType: ChartType;\r\n  standalone: boolean;\r\n  freezeAnimation: boolean;\r\n  showSidePanel: boolean;\r\n  config: Config;\r\n}\r\n\r\n/**\r\n * Retrieve arguments passed into the application through the URL and uploaded\r\n * data.\r\n */\r\nfunction getArguments(location: H.Location<any>): Arguments {\r\n  const search = queryString.parse(location.search);\r\n  const getParam = (name: string) => {\r\n    const value = search[name];\r\n    return typeof value === 'string' ? value : undefined;\r\n  };\r\n\r\n  const view = getParam('view');\r\n  const chartTypes = new Map<string | undefined, ChartType>([\r\n    ['relatives', ChartType.Relatives],\r\n    ['fancy', ChartType.Fancy],\r\n  ]);\r\n\r\n  const hash = getParam('file');\r\n  const url = \"https://raw.githubusercontent.com/patayg/luca/main/luca.gedx\";\r\n  const embedded = getParam('embedded') === 'true'; // False by default.\r\n  var sourceSpec: DataSourceSpec | undefined = undefined;\r\n  if (getParam('source') === 'wikitree') {\r\n    sourceSpec = {\r\n      source: DataSourceEnum.WIKITREE,\r\n      authcode: getParam('authcode'),\r\n    };\r\n  } else if (hash) {\r\n    sourceSpec = {\r\n      source: DataSourceEnum.UPLOADED,\r\n      hash,\r\n      gedcom: location.state && location.state.data,\r\n      images: location.state && location.state.images,\r\n    };\r\n  } else if (url) {\r\n    sourceSpec = {\r\n      source: DataSourceEnum.GEDCOM_URL,\r\n      url,\r\n      handleCors: getParam('handleCors') !== 'false', // True by default.\r\n    };\r\n  } else if (embedded) {\r\n    sourceSpec = {source: DataSourceEnum.EMBEDDED};\r\n  }\r\n\r\n  const indi = getParam('indi');\r\n  const parsedGen = Number(getParam('gen'));\r\n  const selection = indi\r\n    ? {id: indi, generation: !isNaN(parsedGen) ? parsedGen : 0}\r\n    : undefined;\r\n\r\n  return {\r\n    sourceSpec,\r\n    selection,\r\n    // Hourglass is the default view.\r\n    chartType: chartTypes.get(view) || ChartType.Hourglass,\r\n\r\n    showSidePanel: getParam('sidePanel') !== 'false', // True by default.\r\n    standalone: getParam('standalone') !== 'false' && !embedded,\r\n    freezeAnimation: getParam('freeze') === 'true', // False by default\r\n    config: argsToConfig(search),\r\n  };\r\n}\r\n\r\nexport function App() {\r\n  /** State of the application. */\r\n  const [state, setState] = useState<AppState>(AppState.INITIAL);\r\n  /** Loaded data. */\r\n  const [data, setData] = useState<TopolaData>();\r\n  /** Selected individual. */\r\n  const [selection, setSelection] = useState<IndiInfo>();\r\n  /** Error to display. */\r\n  const [error, setError] = useState<string>();\r\n  /** Whether the side panel is shown. */\r\n  const [showSidePanel, setShowSidePanel] = useState(false);\r\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\r\n  const [standalone, setStandalone] = useState(true);\r\n  /** Type of displayed chart. */\r\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Hourglass);\r\n  /** Whether to show the error popup. */\r\n  const [showErrorPopup, setShowErrorPopup] = useState(false);\r\n  /** Specification of the source of the data. */\r\n  const [sourceSpec, setSourceSpec] = useState<DataSourceSpec>();\r\n  /** Freeze animations after initial chart render. */\r\n  const [freezeAnimation, setFreezeAnimation] = useState(false);\r\n  const [config, setConfig] = useState(DEFALUT_CONFIG);\r\n\r\n  const intl = useIntl();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  /** Sets the state with a new individual selection and chart type. */\r\n  function updateDisplay(newSelection: IndiInfo) {\r\n    if (\r\n      !selection ||\r\n      selection.id !== newSelection.id ||\r\n      selection!.generation !== newSelection.generation\r\n    ) {\r\n      setSelection(newSelection);\r\n    }\r\n  }\r\n\r\n  /** Sets error message after data load failure. */\r\n  function setErrorMessage(message: string) {\r\n    setError(message);\r\n    setState(AppState.ERROR);\r\n  }\r\n\r\n  const uploadedDataSource = new UploadedDataSource();\r\n  const gedcomUrlDataSource = new GedcomUrlDataSource();\r\n  const wikiTreeDataSource = new WikiTreeDataSource(intl);\r\n  const embeddedDataSource = new EmbeddedDataSource();\r\n\r\n  function isNewData(newSourceSpec: DataSourceSpec, newSelection?: IndiInfo) {\r\n    if (!sourceSpec || sourceSpec.source !== newSourceSpec.source) {\r\n      // New data source means new data.\r\n      return true;\r\n    }\r\n    const newSource = {spec: newSourceSpec, selection: newSelection};\r\n    const oldSouce = {\r\n      spec: sourceSpec,\r\n      selection: selection,\r\n    };\r\n    switch (newSource.spec.source) {\r\n      case DataSourceEnum.UPLOADED:\r\n        return uploadedDataSource.isNewData(\r\n          newSource as SourceSelection<UploadSourceSpec>,\r\n          oldSouce as SourceSelection<UploadSourceSpec>,\r\n          data,\r\n        );\r\n      case DataSourceEnum.GEDCOM_URL:\r\n        return gedcomUrlDataSource.isNewData(\r\n          newSource as SourceSelection<UrlSourceSpec>,\r\n          oldSouce as SourceSelection<UrlSourceSpec>,\r\n          data,\r\n        );\r\n      case DataSourceEnum.WIKITREE:\r\n        return wikiTreeDataSource.isNewData(\r\n          newSource as SourceSelection<WikiTreeSourceSpec>,\r\n          oldSouce as SourceSelection<WikiTreeSourceSpec>,\r\n          data,\r\n        );\r\n      case DataSourceEnum.EMBEDDED:\r\n        return embeddedDataSource.isNewData(\r\n          newSource as SourceSelection<EmbeddedSourceSpec>,\r\n          oldSouce as SourceSelection<EmbeddedSourceSpec>,\r\n          data,\r\n        );\r\n    }\r\n  }\r\n\r\n  function loadData(newSourceSpec: DataSourceSpec, newSelection?: IndiInfo) {\r\n    switch (newSourceSpec.source) {\r\n      case DataSourceEnum.UPLOADED:\r\n        return uploadedDataSource.loadData({\r\n          spec: newSourceSpec,\r\n          selection: newSelection,\r\n        });\r\n      case DataSourceEnum.GEDCOM_URL:\r\n        return gedcomUrlDataSource.loadData({\r\n          spec: newSourceSpec,\r\n          selection: newSelection,\r\n        });\r\n      case DataSourceEnum.WIKITREE:\r\n        return wikiTreeDataSource.loadData({\r\n          spec: newSourceSpec,\r\n          selection: newSelection,\r\n        });\r\n      case DataSourceEnum.EMBEDDED:\r\n        return embeddedDataSource.loadData({\r\n          spec: newSourceSpec,\r\n          selection: newSelection,\r\n        });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (location.pathname !== '/view') {\r\n        if (state !== AppState.INITIAL) {\r\n          setState(AppState.INITIAL);\r\n        }\r\n        return;\r\n      }\r\n\r\n      const args = getArguments(location);\r\n\r\n      if (!args.sourceSpec) {\r\n        history.replace({pathname: '/'});\r\n        return;\r\n      }\r\n\r\n      if (\r\n        state === AppState.INITIAL ||\r\n        isNewData(args.sourceSpec, args.selection)\r\n      ) {\r\n        // Set loading state.\r\n        setState(AppState.LOADING);\r\n        // Set state from URL parameters.\r\n        setSourceSpec(args.sourceSpec);\r\n        setSelection(args.selection);\r\n        setStandalone(args.standalone);\r\n        setChartType(args.chartType);\r\n        setFreezeAnimation(args.freezeAnimation);\r\n        setConfig(args.config);\r\n        try {\r\n          const data = await loadData(args.sourceSpec, args.selection);\r\n          // Set state with data.\r\n          setData(data);\r\n          setSelection(getSelection(data.chartData, args.selection));\r\n          setShowSidePanel(args.showSidePanel);\r\n          setState(AppState.SHOWING_CHART);\r\n        } catch (error: any) {\r\n          setErrorMessage(getI18nMessage(error, intl));\r\n        }\r\n      } else if (\r\n        state === AppState.SHOWING_CHART ||\r\n        state === AppState.LOADING_MORE\r\n      ) {\r\n        // Update selection if it has changed in the URL.\r\n        const newSelection = getSelection(data!.chartData, args.selection);\r\n        const loadMoreFromWikitree =\r\n          args.sourceSpec.source === DataSourceEnum.WIKITREE &&\r\n          (!selection || selection.id !== newSelection.id);\r\n        setChartType(args.chartType);\r\n        setState(\r\n          loadMoreFromWikitree ? AppState.LOADING_MORE : AppState.SHOWING_CHART,\r\n        );\r\n        updateDisplay(newSelection);\r\n        if (loadMoreFromWikitree) {\r\n          try {\r\n            const data = await loadWikiTree(args.selection!.id, intl);\r\n            const newSelection = getSelection(data.chartData, args.selection);\r\n            setData(data);\r\n            setSelection(newSelection);\r\n            setState(AppState.SHOWING_CHART);\r\n          } catch (error: any) {\r\n            setState(AppState.SHOWING_CHART);\r\n            displayErrorPopup(\r\n              intl.formatMessage(\r\n                {\r\n                  id: 'error.failed_wikitree_load_more',\r\n                  defaultMessage: 'Failed to load data from WikiTree. {error}',\r\n                },\r\n                {error},\r\n              ),\r\n            );\r\n          }\r\n        }\r\n      }\r\n    })();\r\n  });\r\n\r\n  function updateUrl(args: queryString.ParsedQuery<any>) {\r\n    const search = queryString.parse(location.search);\r\n    for (const key in args) {\r\n      search[key] = args[key];\r\n    }\r\n    location.search = queryString.stringify(search);\r\n    history.push(location);\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks an individual box in the chart.\r\n   * Updates the browser URL.\r\n   */\r\n  function onSelection(selection: IndiInfo) {\r\n    // Don't allow selecting WikiTree private profiles.\r\n    if (selection.id.startsWith(PRIVATE_ID_PREFIX)) {\r\n      return;\r\n    }\r\n    updateUrl({\r\n      indi: selection.id,\r\n      gen: selection.generation,\r\n    });\r\n  }\r\n\r\n  function onPrint() {\r\n    printChart();\r\n  }\r\n\r\n  function displayErrorPopup(message: string) {\r\n    setShowErrorPopup(true);\r\n    setError(message);\r\n  }\r\n\r\n  async function onDownloadPdf() {\r\n    try {\r\n      await downloadPdf();\r\n    } catch (e) {\r\n      displayErrorPopup(\r\n        intl.formatMessage({\r\n          id: 'error.failed_pdf',\r\n          defaultMessage:\r\n            'Failed to generate PDF file.' +\r\n            ' Please try with a smaller diagram or download an SVG file.',\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  async function onDownloadPng() {\r\n    try {\r\n      await downloadPng();\r\n    } catch (e) {\r\n      displayErrorPopup(\r\n        intl.formatMessage({\r\n          id: 'error.failed_png',\r\n          defaultMessage:\r\n            'Failed to generate PNG file.' +\r\n            ' Please try with a smaller diagram or download an SVG file.',\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  function onDownloadSvg() {\r\n    downloadSvg();\r\n  }\r\n\r\n  function onDismissErrorPopup() {\r\n    setShowErrorPopup(false);\r\n  }\r\n\r\n  function renderMainArea() {\r\n    switch (state) {\r\n      case AppState.SHOWING_CHART:\r\n      case AppState.LOADING_MORE:\r\n        const sidePanelTabs = [\r\n          //{\r\n          //  menuItem: intl.formatMessage({\r\n          //    id: 'tab.info',\r\n          //    defaultMessage: 'Info',\r\n          //  }),\r\n          //  render: () => (\r\n          //    <Details gedcom={data!.gedcom} indi={selection!.id} />\r\n          //  ),\r\n          //},\r\n          {\r\n            menuItem: intl.formatMessage({\r\n              id: 'tab.settings',\r\n              defaultMessage: 'Settings',\r\n            }),\r\n            render: () => (\r\n              <ConfigPanel\r\n                config={config}\r\n                onChange={(config) => {\r\n                  setConfig(config);\r\n                  updateUrl(configToArgs(config));\r\n                }}\r\n              />\r\n            ),\r\n          },\r\n        ];\r\n        return (\r\n          <div id=\"content\">\r\n            <ErrorPopup\r\n              open={showErrorPopup}\r\n              message={error}\r\n              onDismiss={onDismissErrorPopup}\r\n            />\r\n            {state === AppState.LOADING_MORE ? (\r\n              <Loader active size=\"small\" className=\"loading-more\" />\r\n            ) : null}\r\n            <Chart\r\n              data={data!.chartData}\r\n              selection={selection!}\r\n              chartType={chartType}\r\n              onSelection={onSelection}\r\n              freezeAnimation={freezeAnimation}\r\n              colors={config.color}\r\n            />\r\n            {showSidePanel ? (\r\n              <Media greaterThanOrEqual=\"large\" className=\"sidePanel\">\r\n                <Tab panes={sidePanelTabs} />\r\n              </Media>\r\n            ) : null}\r\n            <Changelog />\r\n          </div>\r\n        );\r\n\r\n      case AppState.ERROR:\r\n        return <ErrorMessage message={error!} />;\r\n\r\n      case AppState.INITIAL:\r\n      case AppState.LOADING:\r\n        return <Loader active size=\"large\" />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Route\r\n        render={() => (\r\n          <TopBar\r\n            data={data?.chartData}\r\n            allowAllRelativesChart={\r\n              sourceSpec?.source !== DataSourceEnum.WIKITREE\r\n            }\r\n            showingChart={\r\n              history.location.pathname === '/view' &&\r\n              (state === AppState.SHOWING_CHART ||\r\n                state === AppState.LOADING_MORE)\r\n            }\r\n            standalone={standalone}\r\n            eventHandlers={{\r\n              onSelection,\r\n              onPrint,\r\n              onDownloadPdf,\r\n              onDownloadPng,\r\n              onDownloadSvg,\r\n            }}\r\n            showWikiTreeMenus={sourceSpec?.source === DataSourceEnum.WIKITREE}\r\n          />\r\n        )}\r\n      />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Intro} />\r\n        <Route exact path=\"/view\" render={renderMainArea} />\r\n        <Redirect to={'/'} />\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport messages_cs from './translations/cs.json';\r\nimport messages_de from './translations/de.json';\r\nimport messages_fr from './translations/fr.json';\r\nimport messages_hu from './translations/hu.json';\r\nimport messages_it from './translations/it.json';\r\nimport messages_pl from './translations/pl.json';\r\nimport messages_ru from './translations/ru.json';\r\nimport {App} from './app';\r\nimport {detect} from 'detect-browser';\r\nimport {HashRouter as Router, Route} from 'react-router-dom';\r\nimport {IntlProvider} from 'react-intl';\r\nimport {MediaContextProvider, mediaStyles} from './util/media';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'canvas-toBlob';\r\n\r\nconst messages = {\r\n  cs: messages_cs,\r\n  de: messages_de,\r\n  fr: messages_fr,\r\n  hu: messages_hu,\r\n  it: messages_it,\r\n  pl: messages_pl,\r\n  ru: messages_ru,\r\n};\r\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\r\n\r\nconst browser = detect();\r\n\r\nif (browser && browser.name === 'ie') {\r\n  ReactDOM.render(\r\n    <p>\r\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\r\n      different (modern) browser.\r\n    </p>,\r\n    document.querySelector('#root'),\r\n  );\r\n} else {\r\n  ReactDOM.render(\r\n    <IntlProvider locale={language} messages={messages[language]}>\r\n      <MediaContextProvider>\r\n        <style>{mediaStyles}</style>\r\n        <Router>\r\n          <Route component={App} />\r\n        </Router>\r\n      </MediaContextProvider>\r\n    </IntlProvider>,\r\n    document.querySelector('#root'),\r\n  );\r\n}\r\n","/** Error class adding an error code used for i18n. */\r\nexport class TopolaError extends Error {\r\n  constructor(\r\n    public readonly code: string,\r\n    message: string,\r\n    public readonly args: {[key: string]: string} = {},\r\n  ) {\r\n    super(message);\r\n  }\r\n}\r\n","import {Date as TopolaDate, DateOrRange, DateRange, getDate} from 'topola';\r\nimport {IntlShape} from 'react-intl';\r\n\r\nconst DATE_QUALIFIERS = new Map([\r\n  ['abt', 'about'],\r\n  ['cal', 'calculated'],\r\n  ['est', 'estimated'],\r\n]);\r\n\r\nfunction formatDate(date: TopolaDate, intl: IntlShape) {\r\n  const hasDay = date.day !== undefined;\r\n  const hasMonth = date.month !== undefined;\r\n  const hasYear = date.year !== undefined;\r\n  if (!hasDay && !hasMonth && !hasYear) {\r\n    return date.text || '';\r\n  }\r\n  const dateObject = toDateObject(date);\r\n  const translatedQualifier = formatDateQualifier(date.qualifier, intl);\r\n\r\n  const formatOptions: Intl.DateTimeFormatOptions = {\r\n    day: hasDay ? 'numeric' : undefined,\r\n    month: hasMonth ? 'long' : undefined,\r\n    year: hasYear ? 'numeric' : undefined,\r\n  };\r\n  const translatedDate = new Intl.DateTimeFormat(\r\n    intl.locale,\r\n    formatOptions,\r\n  ).format(dateObject);\r\n\r\n  return [translatedQualifier, translatedDate].join(' ');\r\n}\r\n\r\nfunction formatDateRage(dateRange: DateRange, intl: IntlShape) {\r\n  const fromDate = dateRange.from;\r\n  const toDate = dateRange.to;\r\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\r\n  const translatedToDate = toDate && formatDate(toDate, intl);\r\n  if (translatedFromDate && translatedToDate) {\r\n    return intl.formatMessage(\r\n      {\r\n        id: 'date.between',\r\n        defaultMessage: 'between {from} and {to}',\r\n      },\r\n      {from: translatedFromDate, to: translatedToDate},\r\n    );\r\n  }\r\n  if (translatedFromDate) {\r\n    return intl.formatMessage(\r\n      {\r\n        id: 'date.after',\r\n        defaultMessage: 'after {from}',\r\n      },\r\n      {from: translatedFromDate},\r\n    );\r\n  }\r\n  if (translatedToDate) {\r\n    return intl.formatMessage(\r\n      {\r\n        id: 'date.before',\r\n        defaultMessage: 'before {to}',\r\n      },\r\n      {to: translatedToDate},\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\nexport function formatDateQualifier(\r\n  qualifier: string | undefined,\r\n  intl: IntlShape,\r\n): string {\r\n  const lowerCaseQualifier = qualifier && qualifier.toLowerCase();\r\n  return (\r\n    (lowerCaseQualifier &&\r\n      intl.formatMessage({\r\n        id: `date.${lowerCaseQualifier}`,\r\n        defaultMessage:\r\n          DATE_QUALIFIERS.get(lowerCaseQualifier) || lowerCaseQualifier,\r\n      })) ||\r\n    ''\r\n  );\r\n}\r\n\r\n/** Formats a DateOrRange object. */\r\nexport function formatDateOrRange(\r\n  dateOrRange: DateOrRange | undefined,\r\n  intl: IntlShape,\r\n): string {\r\n  if (!dateOrRange) {\r\n    return '';\r\n  }\r\n  if (dateOrRange.date) {\r\n    return formatDate(dateOrRange.date, intl);\r\n  }\r\n  if (dateOrRange.dateRange) {\r\n    return formatDateRage(dateOrRange.dateRange, intl);\r\n  }\r\n  return '';\r\n}\r\n\r\n/** Formats a date given in GEDCOM format. */\r\nexport function translateDate(gedcomDate: string, intl: IntlShape): string {\r\n  return formatDateOrRange(getDate(gedcomDate), intl);\r\n}\r\n\r\nexport function compareTopolaDates(\r\n  date1: TopolaDate | undefined,\r\n  date2: TopolaDate | undefined,\r\n): number {\r\n  if (!date1 || !date1.year || !date2 || !date2.year) {\r\n    return 0;\r\n  }\r\n  if (date1.year !== date2.year) {\r\n    return date1.year - date2.year;\r\n  }\r\n  if (!date1.month || !date2.month) {\r\n    return 0;\r\n  }\r\n  if (date1.month !== date2.month) {\r\n    return date1.month - date2.month;\r\n  }\r\n  if (date1.day && date2.day && date1.day !== date2.day) {\r\n    return date1.month - date2.month;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Compares a dates given in GEDCOM format. */\r\nexport function compareDates(\r\n  firstDateOrRange: DateOrRange | undefined,\r\n  secondDateOrRange: DateOrRange | undefined,\r\n): number {\r\n  const date1 =\r\n    firstDateOrRange &&\r\n    (firstDateOrRange.date ||\r\n      (firstDateOrRange.dateRange &&\r\n        (firstDateOrRange.dateRange.from || firstDateOrRange.dateRange.to)));\r\n  const date2 =\r\n    secondDateOrRange &&\r\n    (secondDateOrRange.date ||\r\n      (secondDateOrRange.dateRange &&\r\n        (secondDateOrRange.dateRange.from || secondDateOrRange.dateRange.to)));\r\n  return compareTopolaDates(date1, date2);\r\n}\r\n\r\nexport function areDateRangesOverlapped(\r\n  range1: DateRange,\r\n  range2: DateRange,\r\n): boolean {\r\n  return (\r\n    compareTopolaDates(range1.from, range2.to) <= 0 &&\r\n    compareTopolaDates(range1.to, range2.from) >= 0\r\n  );\r\n}\r\n\r\nexport function isValidDateOrRange(\r\n  dateOrRange: DateOrRange | undefined,\r\n): boolean {\r\n  // invalid when range is closed and start is before end\r\n  if (isDateRangeClosed(dateOrRange?.dateRange)) {\r\n    return (\r\n      compareTopolaDates(\r\n        dateOrRange?.dateRange?.from,\r\n        dateOrRange?.dateRange?.to,\r\n      ) <= 0\r\n    );\r\n  }\r\n  //valid when there is exact date or date range has start or end defined\r\n  return !!(\r\n    dateOrRange?.date ||\r\n    dateOrRange?.dateRange?.from ||\r\n    dateOrRange?.dateRange?.to\r\n  );\r\n}\r\n\r\nexport function isDateRangeClosed(range: DateRange | undefined): boolean {\r\n  return !!(range?.from && range?.to);\r\n}\r\n\r\nexport function toDateObject(date: TopolaDate): Date {\r\n  return new Date(\r\n    date.year !== undefined ? date.year! : 0,\r\n    date.month !== undefined ? date.month! - 1 : 0,\r\n    date.day !== undefined ? date.day! : 1,\r\n  );\r\n}\r\n"],"sourceRoot":""}